// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package projects

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-command/sdk/go/command/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

func ApplyMigrations(ctx *pulumi.Context, args *ApplyMigrationsArgs, opts ...pulumi.InvokeOption) (*ApplyMigrationsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv ApplyMigrationsResult
	err := ctx.Invoke("supabase:projects:applyMigrations", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type ApplyMigrationsArgs struct {
	Db_host       string `pulumi:"db_host"`
	Db_pass       string `pulumi:"db_pass"`
	Include_all   *bool  `pulumi:"include_all"`
	Include_roles *bool  `pulumi:"include_roles"`
	Include_seed  *bool  `pulumi:"include_seed"`
}

type ApplyMigrationsResult struct {
	Success bool `pulumi:"success"`
}

func ApplyMigrationsOutput(ctx *pulumi.Context, args ApplyMigrationsOutputArgs, opts ...pulumi.InvokeOption) ApplyMigrationsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ApplyMigrationsResult, error) {
			args := v.(ApplyMigrationsArgs)
			r, err := ApplyMigrations(ctx, &args, opts...)
			var s ApplyMigrationsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(ApplyMigrationsResultOutput)
}

type ApplyMigrationsOutputArgs struct {
	Db_host       pulumi.StringInput  `pulumi:"db_host"`
	Db_pass       pulumi.StringInput  `pulumi:"db_pass"`
	Include_all   pulumi.BoolPtrInput `pulumi:"include_all"`
	Include_roles pulumi.BoolPtrInput `pulumi:"include_roles"`
	Include_seed  pulumi.BoolPtrInput `pulumi:"include_seed"`
}

func (ApplyMigrationsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplyMigrationsArgs)(nil)).Elem()
}

type ApplyMigrationsResultOutput struct{ *pulumi.OutputState }

func (ApplyMigrationsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApplyMigrationsResult)(nil)).Elem()
}

func (o ApplyMigrationsResultOutput) ToApplyMigrationsResultOutput() ApplyMigrationsResultOutput {
	return o
}

func (o ApplyMigrationsResultOutput) ToApplyMigrationsResultOutputWithContext(ctx context.Context) ApplyMigrationsResultOutput {
	return o
}

func (o ApplyMigrationsResultOutput) ToOutput(ctx context.Context) pulumix.Output[ApplyMigrationsResult] {
	return pulumix.Output[ApplyMigrationsResult]{
		OutputState: o.OutputState,
	}
}

func (o ApplyMigrationsResultOutput) Success() pulumi.BoolOutput {
	return o.ApplyT(func(v ApplyMigrationsResult) bool { return v.Success }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(ApplyMigrationsResultOutput{})
}
