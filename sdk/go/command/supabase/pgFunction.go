// Code generated by pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package supabase

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PgFunction struct {
	pulumi.CustomResourceState

	Args          pulumi.StringArrayOutput `pulumi:"args"`
	Behaviour     pulumi.StringOutput      `pulumi:"behaviour"`
	Config_params pulumi.MapOutput         `pulumi:"config_params"`
	Definition    pulumi.StringOutput      `pulumi:"definition"`
	Function_name pulumi.StringOutput      `pulumi:"function_name"`
	Language      pulumi.StringOutput      `pulumi:"language"`
	Name          pulumi.StringPtrOutput   `pulumi:"name"`
	Project_ref   pulumi.StringOutput      `pulumi:"project_ref"`
	Return_type   pulumi.StringOutput      `pulumi:"return_type"`
	Schema        pulumi.StringOutput      `pulumi:"schema"`
	Verify_jwt    pulumi.BoolOutput        `pulumi:"verify_jwt"`
}

// NewPgFunction registers a new resource with the given unique name, arguments, and options.
func NewPgFunction(ctx *pulumi.Context,
	name string, args *PgFunctionArgs, opts ...pulumi.ResourceOption) (*PgFunction, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Behaviour == nil {
		return nil, errors.New("invalid value for required argument 'Behaviour'")
	}
	if args.Definition == nil {
		return nil, errors.New("invalid value for required argument 'Definition'")
	}
	if args.Language == nil {
		return nil, errors.New("invalid value for required argument 'Language'")
	}
	if args.Project_ref == nil {
		return nil, errors.New("invalid value for required argument 'Project_ref'")
	}
	if args.Return_type == nil {
		return nil, errors.New("invalid value for required argument 'Return_type'")
	}
	if args.Schema == nil {
		return nil, errors.New("invalid value for required argument 'Schema'")
	}
	if args.Verify_jwt == nil {
		return nil, errors.New("invalid value for required argument 'Verify_jwt'")
	}
	var resource PgFunction
	err := ctx.RegisterResource("supabase:supabase:PgFunction", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPgFunction gets an existing PgFunction resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPgFunction(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PgFunctionState, opts ...pulumi.ResourceOption) (*PgFunction, error) {
	var resource PgFunction
	err := ctx.ReadResource("supabase:supabase:PgFunction", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PgFunction resources.
type pgFunctionState struct {
}

type PgFunctionState struct {
}

func (PgFunctionState) ElementType() reflect.Type {
	return reflect.TypeOf((*pgFunctionState)(nil)).Elem()
}

type pgFunctionArgs struct {
	Args          []string               `pulumi:"args"`
	Behaviour     string                 `pulumi:"behaviour"`
	Config_params map[string]interface{} `pulumi:"config_params"`
	Definition    string                 `pulumi:"definition"`
	Language      string                 `pulumi:"language"`
	Name          *string                `pulumi:"name"`
	Project_ref   string                 `pulumi:"project_ref"`
	Return_type   string                 `pulumi:"return_type"`
	Schema        string                 `pulumi:"schema"`
	Verify_jwt    bool                   `pulumi:"verify_jwt"`
}

// The set of arguments for constructing a PgFunction resource.
type PgFunctionArgs struct {
	Args          pulumi.StringArrayInput
	Behaviour     pulumi.StringInput
	Config_params pulumi.MapInput
	Definition    pulumi.StringInput
	Language      pulumi.StringInput
	Name          pulumi.StringPtrInput
	Project_ref   pulumi.StringInput
	Return_type   pulumi.StringInput
	Schema        pulumi.StringInput
	Verify_jwt    pulumi.BoolInput
}

func (PgFunctionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*pgFunctionArgs)(nil)).Elem()
}

type PgFunctionInput interface {
	pulumi.Input

	ToPgFunctionOutput() PgFunctionOutput
	ToPgFunctionOutputWithContext(ctx context.Context) PgFunctionOutput
}

func (*PgFunction) ElementType() reflect.Type {
	return reflect.TypeOf((**PgFunction)(nil)).Elem()
}

func (i *PgFunction) ToPgFunctionOutput() PgFunctionOutput {
	return i.ToPgFunctionOutputWithContext(context.Background())
}

func (i *PgFunction) ToPgFunctionOutputWithContext(ctx context.Context) PgFunctionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgFunctionOutput)
}

// PgFunctionArrayInput is an input type that accepts PgFunctionArray and PgFunctionArrayOutput values.
// You can construct a concrete instance of `PgFunctionArrayInput` via:
//
//	PgFunctionArray{ PgFunctionArgs{...} }
type PgFunctionArrayInput interface {
	pulumi.Input

	ToPgFunctionArrayOutput() PgFunctionArrayOutput
	ToPgFunctionArrayOutputWithContext(context.Context) PgFunctionArrayOutput
}

type PgFunctionArray []PgFunctionInput

func (PgFunctionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgFunction)(nil)).Elem()
}

func (i PgFunctionArray) ToPgFunctionArrayOutput() PgFunctionArrayOutput {
	return i.ToPgFunctionArrayOutputWithContext(context.Background())
}

func (i PgFunctionArray) ToPgFunctionArrayOutputWithContext(ctx context.Context) PgFunctionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgFunctionArrayOutput)
}

// PgFunctionMapInput is an input type that accepts PgFunctionMap and PgFunctionMapOutput values.
// You can construct a concrete instance of `PgFunctionMapInput` via:
//
//	PgFunctionMap{ "key": PgFunctionArgs{...} }
type PgFunctionMapInput interface {
	pulumi.Input

	ToPgFunctionMapOutput() PgFunctionMapOutput
	ToPgFunctionMapOutputWithContext(context.Context) PgFunctionMapOutput
}

type PgFunctionMap map[string]PgFunctionInput

func (PgFunctionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgFunction)(nil)).Elem()
}

func (i PgFunctionMap) ToPgFunctionMapOutput() PgFunctionMapOutput {
	return i.ToPgFunctionMapOutputWithContext(context.Background())
}

func (i PgFunctionMap) ToPgFunctionMapOutputWithContext(ctx context.Context) PgFunctionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PgFunctionMapOutput)
}

type PgFunctionOutput struct{ *pulumi.OutputState }

func (PgFunctionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PgFunction)(nil)).Elem()
}

func (o PgFunctionOutput) ToPgFunctionOutput() PgFunctionOutput {
	return o
}

func (o PgFunctionOutput) ToPgFunctionOutputWithContext(ctx context.Context) PgFunctionOutput {
	return o
}

func (o PgFunctionOutput) Args() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *PgFunction) pulumi.StringArrayOutput { return v.Args }).(pulumi.StringArrayOutput)
}

func (o PgFunctionOutput) Behaviour() pulumi.StringOutput {
	return o.ApplyT(func(v *PgFunction) pulumi.StringOutput { return v.Behaviour }).(pulumi.StringOutput)
}

func (o PgFunctionOutput) Config_params() pulumi.MapOutput {
	return o.ApplyT(func(v *PgFunction) pulumi.MapOutput { return v.Config_params }).(pulumi.MapOutput)
}

func (o PgFunctionOutput) Definition() pulumi.StringOutput {
	return o.ApplyT(func(v *PgFunction) pulumi.StringOutput { return v.Definition }).(pulumi.StringOutput)
}

func (o PgFunctionOutput) Function_name() pulumi.StringOutput {
	return o.ApplyT(func(v *PgFunction) pulumi.StringOutput { return v.Function_name }).(pulumi.StringOutput)
}

func (o PgFunctionOutput) Language() pulumi.StringOutput {
	return o.ApplyT(func(v *PgFunction) pulumi.StringOutput { return v.Language }).(pulumi.StringOutput)
}

func (o PgFunctionOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PgFunction) pulumi.StringPtrOutput { return v.Name }).(pulumi.StringPtrOutput)
}

func (o PgFunctionOutput) Project_ref() pulumi.StringOutput {
	return o.ApplyT(func(v *PgFunction) pulumi.StringOutput { return v.Project_ref }).(pulumi.StringOutput)
}

func (o PgFunctionOutput) Return_type() pulumi.StringOutput {
	return o.ApplyT(func(v *PgFunction) pulumi.StringOutput { return v.Return_type }).(pulumi.StringOutput)
}

func (o PgFunctionOutput) Schema() pulumi.StringOutput {
	return o.ApplyT(func(v *PgFunction) pulumi.StringOutput { return v.Schema }).(pulumi.StringOutput)
}

func (o PgFunctionOutput) Verify_jwt() pulumi.BoolOutput {
	return o.ApplyT(func(v *PgFunction) pulumi.BoolOutput { return v.Verify_jwt }).(pulumi.BoolOutput)
}

type PgFunctionArrayOutput struct{ *pulumi.OutputState }

func (PgFunctionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PgFunction)(nil)).Elem()
}

func (o PgFunctionArrayOutput) ToPgFunctionArrayOutput() PgFunctionArrayOutput {
	return o
}

func (o PgFunctionArrayOutput) ToPgFunctionArrayOutputWithContext(ctx context.Context) PgFunctionArrayOutput {
	return o
}

func (o PgFunctionArrayOutput) Index(i pulumi.IntInput) PgFunctionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PgFunction {
		return vs[0].([]*PgFunction)[vs[1].(int)]
	}).(PgFunctionOutput)
}

type PgFunctionMapOutput struct{ *pulumi.OutputState }

func (PgFunctionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PgFunction)(nil)).Elem()
}

func (o PgFunctionMapOutput) ToPgFunctionMapOutput() PgFunctionMapOutput {
	return o
}

func (o PgFunctionMapOutput) ToPgFunctionMapOutputWithContext(ctx context.Context) PgFunctionMapOutput {
	return o
}

func (o PgFunctionMapOutput) MapIndex(k pulumi.StringInput) PgFunctionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PgFunction {
		return vs[0].(map[string]*PgFunction)[vs[1].(string)]
	}).(PgFunctionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PgFunctionInput)(nil)).Elem(), &PgFunction{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgFunctionArrayInput)(nil)).Elem(), PgFunctionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PgFunctionMapInput)(nil)).Elem(), PgFunctionMap{})
	pulumi.RegisterOutputType(PgFunctionOutput{})
	pulumi.RegisterOutputType(PgFunctionArrayOutput{})
	pulumi.RegisterOutputType(PgFunctionMapOutput{})
}
