// *** WARNING: this file was generated by pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

export class DbFunction extends pulumi.CustomResource {
    /**
     * Get an existing DbFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DbFunction {
        return new DbFunction(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'supabase:functions:DbFunction';

    /**
     * Returns true if the given object is an instance of DbFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DbFunction {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DbFunction.__pulumiType;
    }

    public readonly args!: pulumi.Output<string[] | undefined>;
    public readonly behaviour!: pulumi.Output<string>;
    public readonly config_params!: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly definition!: pulumi.Output<string>;
    public /*out*/ readonly function_name!: pulumi.Output<string>;
    public readonly language!: pulumi.Output<string>;
    public readonly name!: pulumi.Output<string | undefined>;
    public readonly project_ref!: pulumi.Output<string>;
    public readonly return_type!: pulumi.Output<string>;
    public readonly schema!: pulumi.Output<string>;
    public readonly verify_jwt!: pulumi.Output<boolean>;

    /**
     * Create a DbFunction resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DbFunctionArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.behaviour === undefined) && !opts.urn) {
                throw new Error("Missing required property 'behaviour'");
            }
            if ((!args || args.definition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'definition'");
            }
            if ((!args || args.language === undefined) && !opts.urn) {
                throw new Error("Missing required property 'language'");
            }
            if ((!args || args.project_ref === undefined) && !opts.urn) {
                throw new Error("Missing required property 'project_ref'");
            }
            if ((!args || args.return_type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'return_type'");
            }
            if ((!args || args.schema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'schema'");
            }
            if ((!args || args.verify_jwt === undefined) && !opts.urn) {
                throw new Error("Missing required property 'verify_jwt'");
            }
            resourceInputs["args"] = args ? args.args : undefined;
            resourceInputs["behaviour"] = args ? args.behaviour : undefined;
            resourceInputs["config_params"] = args ? args.config_params : undefined;
            resourceInputs["definition"] = args ? args.definition : undefined;
            resourceInputs["language"] = args ? args.language : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["project_ref"] = args ? args.project_ref : undefined;
            resourceInputs["return_type"] = args ? args.return_type : undefined;
            resourceInputs["schema"] = args ? args.schema : undefined;
            resourceInputs["verify_jwt"] = args ? args.verify_jwt : undefined;
            resourceInputs["function_name"] = undefined /*out*/;
        } else {
            resourceInputs["args"] = undefined /*out*/;
            resourceInputs["behaviour"] = undefined /*out*/;
            resourceInputs["config_params"] = undefined /*out*/;
            resourceInputs["definition"] = undefined /*out*/;
            resourceInputs["function_name"] = undefined /*out*/;
            resourceInputs["language"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["project_ref"] = undefined /*out*/;
            resourceInputs["return_type"] = undefined /*out*/;
            resourceInputs["schema"] = undefined /*out*/;
            resourceInputs["verify_jwt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DbFunction.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a DbFunction resource.
 */
export interface DbFunctionArgs {
    args?: pulumi.Input<pulumi.Input<string>[]>;
    behaviour: pulumi.Input<string>;
    config_params?: pulumi.Input<{[key: string]: any}>;
    definition: pulumi.Input<string>;
    language: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    project_ref: pulumi.Input<string>;
    return_type: pulumi.Input<string>;
    schema: pulumi.Input<string>;
    verify_jwt: pulumi.Input<boolean>;
}
