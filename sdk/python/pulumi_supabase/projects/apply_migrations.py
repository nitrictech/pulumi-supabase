# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'ApplyMigrationsResult',
    'AwaitableApplyMigrationsResult',
    'apply_migrations',
    'apply_migrations_output',
]

@pulumi.output_type
class ApplyMigrationsResult:
    def __init__(__self__, success=None):
        if success and not isinstance(success, bool):
            raise TypeError("Expected argument 'success' to be a bool")
        pulumi.set(__self__, "success", success)

    @property
    @pulumi.getter
    def success(self) -> bool:
        return pulumi.get(self, "success")


class AwaitableApplyMigrationsResult(ApplyMigrationsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return ApplyMigrationsResult(
            success=self.success)


def apply_migrations(db_host: Optional[str] = None,
                     db_pass: Optional[str] = None,
                     include_all: Optional[bool] = None,
                     include_roles: Optional[bool] = None,
                     include_seed: Optional[bool] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableApplyMigrationsResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['db_host'] = db_host
    __args__['db_pass'] = db_pass
    __args__['include_all'] = include_all
    __args__['include_roles'] = include_roles
    __args__['include_seed'] = include_seed
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('supabase:projects:applyMigrations', __args__, opts=opts, typ=ApplyMigrationsResult).value

    return AwaitableApplyMigrationsResult(
        success=pulumi.get(__ret__, 'success'))


@_utilities.lift_output_func(apply_migrations)
def apply_migrations_output(db_host: Optional[pulumi.Input[str]] = None,
                            db_pass: Optional[pulumi.Input[str]] = None,
                            include_all: Optional[pulumi.Input[Optional[bool]]] = None,
                            include_roles: Optional[pulumi.Input[Optional[bool]]] = None,
                            include_seed: Optional[pulumi.Input[Optional[bool]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[ApplyMigrationsResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
