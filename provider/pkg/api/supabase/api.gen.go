// Package supabase provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package supabase

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerScopes = "bearer.Scopes"
)

// Defines values for BranchDetailResponseStatus.
const (
	BranchDetailResponseStatusACTIVEHEALTHY   BranchDetailResponseStatus = "ACTIVE_HEALTHY"
	BranchDetailResponseStatusACTIVEUNHEALTHY BranchDetailResponseStatus = "ACTIVE_UNHEALTHY"
	BranchDetailResponseStatusCOMINGUP        BranchDetailResponseStatus = "COMING_UP"
	BranchDetailResponseStatusGOINGDOWN       BranchDetailResponseStatus = "GOING_DOWN"
	BranchDetailResponseStatusINACTIVE        BranchDetailResponseStatus = "INACTIVE"
	BranchDetailResponseStatusINITFAILED      BranchDetailResponseStatus = "INIT_FAILED"
	BranchDetailResponseStatusPAUSING         BranchDetailResponseStatus = "PAUSING"
	BranchDetailResponseStatusREMOVED         BranchDetailResponseStatus = "REMOVED"
	BranchDetailResponseStatusRESTORING       BranchDetailResponseStatus = "RESTORING"
	BranchDetailResponseStatusUNKNOWN         BranchDetailResponseStatus = "UNKNOWN"
	BranchDetailResponseStatusUPGRADING       BranchDetailResponseStatus = "UPGRADING"
)

// Defines values for CreateProjectBodyPlan.
const (
	Free CreateProjectBodyPlan = "free"
	Pro  CreateProjectBodyPlan = "pro"
)

// Defines values for CreateProjectBodyRegion.
const (
	ApNortheast1 CreateProjectBodyRegion = "ap-northeast-1"
	ApNortheast2 CreateProjectBodyRegion = "ap-northeast-2"
	ApSouth1     CreateProjectBodyRegion = "ap-south-1"
	ApSoutheast1 CreateProjectBodyRegion = "ap-southeast-1"
	ApSoutheast2 CreateProjectBodyRegion = "ap-southeast-2"
	CaCentral1   CreateProjectBodyRegion = "ca-central-1"
	EuCentral1   CreateProjectBodyRegion = "eu-central-1"
	EuWest1      CreateProjectBodyRegion = "eu-west-1"
	EuWest2      CreateProjectBodyRegion = "eu-west-2"
	EuWest3      CreateProjectBodyRegion = "eu-west-3"
	SaEast1      CreateProjectBodyRegion = "sa-east-1"
	UsEast1      CreateProjectBodyRegion = "us-east-1"
	UsWest1      CreateProjectBodyRegion = "us-west-1"
	UsWest2      CreateProjectBodyRegion = "us-west-2"
)

// Defines values for CreateProviderBodyType.
const (
	Saml CreateProviderBodyType = "saml"
)

// Defines values for DatabaseUpgradeStatusError.
const (
	N1UpgradedInstanceLaunchFailed                 DatabaseUpgradeStatusError = "1_upgraded_instance_launch_failed"
	N2VolumeDetachchmentFromUpgradedInstanceFailed DatabaseUpgradeStatusError = "2_volume_detachchment_from_upgraded_instance_failed"
	N3VolumeAttachmentToOriginalInstanceFailed     DatabaseUpgradeStatusError = "3_volume_attachment_to_original_instance_failed"
	N4DataUpgradeInitiationFailed                  DatabaseUpgradeStatusError = "4_data_upgrade_initiation_failed"
	N5DataUpgradeCompletionFailed                  DatabaseUpgradeStatusError = "5_data_upgrade_completion_failed"
	N6VolumeDetachchmentFromOriginalInstanceFailed DatabaseUpgradeStatusError = "6_volume_detachchment_from_original_instance_failed"
	N7VolumeAttachmentToUpgradedInstanceFailed     DatabaseUpgradeStatusError = "7_volume_attachment_to_upgraded_instance_failed"
	N8UpgradeCompletionFailed                      DatabaseUpgradeStatusError = "8_upgrade_completion_failed"
)

// Defines values for DatabaseUpgradeStatusProgress.
const (
	N1Started                            DatabaseUpgradeStatusProgress = "1_started"
	N2LaunchedUpgradedInstance           DatabaseUpgradeStatusProgress = "2_launched_upgraded_instance"
	N3DetachedVolumeFromUpgradedInstance DatabaseUpgradeStatusProgress = "3_detached_volume_from_upgraded_instance"
	N4AttachedVolumeToOriginalInstance   DatabaseUpgradeStatusProgress = "4_attached_volume_to_original_instance"
	N5InitiatedDataUpgrade               DatabaseUpgradeStatusProgress = "5_initiated_data_upgrade"
	N6CompletedDataUpgrade               DatabaseUpgradeStatusProgress = "6_completed_data_upgrade"
	N7DetachedVolumeFromOriginalInstance DatabaseUpgradeStatusProgress = "7_detached_volume_from_original_instance"
	N8AttachedVolumeToUpgradedInstance   DatabaseUpgradeStatusProgress = "8_attached_volume_to_upgraded_instance"
	N9CompletedUpgrade                   DatabaseUpgradeStatusProgress = "9_completed_upgrade"
)

// Defines values for DatabaseUpgradeStatusStatus.
const (
	N0 DatabaseUpgradeStatusStatus = 0
	N1 DatabaseUpgradeStatusStatus = 1
	N2 DatabaseUpgradeStatusStatus = 2
)

// Defines values for FunctionResponseStatus.
const (
	FunctionResponseStatusACTIVE    FunctionResponseStatus = "ACTIVE"
	FunctionResponseStatusREMOVED   FunctionResponseStatus = "REMOVED"
	FunctionResponseStatusTHROTTLED FunctionResponseStatus = "THROTTLED"
)

// Defines values for FunctionSlugResponseStatus.
const (
	ACTIVE    FunctionSlugResponseStatus = "ACTIVE"
	REMOVED   FunctionSlugResponseStatus = "REMOVED"
	THROTTLED FunctionSlugResponseStatus = "THROTTLED"
)

// Defines values for NetworkRestrictionsResponseEntitlement.
const (
	Allowed    NetworkRestrictionsResponseEntitlement = "allowed"
	Disallowed NetworkRestrictionsResponseEntitlement = "disallowed"
)

// Defines values for NetworkRestrictionsResponseStatus.
const (
	Applied NetworkRestrictionsResponseStatus = "applied"
	Stored  NetworkRestrictionsResponseStatus = "stored"
)

// Defines values for OAuthTokenBodyGrantType.
const (
	AuthorizationCode OAuthTokenBodyGrantType = "authorization_code"
	RefreshToken      OAuthTokenBodyGrantType = "refresh_token"
)

// Defines values for OAuthTokenResponseTokenType.
const (
	Bearer OAuthTokenResponseTokenType = "Bearer"
)

// Defines values for PostgresConfigResponseSessionReplicationRole.
const (
	PostgresConfigResponseSessionReplicationRoleLocal   PostgresConfigResponseSessionReplicationRole = "local"
	PostgresConfigResponseSessionReplicationRoleOrigin  PostgresConfigResponseSessionReplicationRole = "origin"
	PostgresConfigResponseSessionReplicationRoleReplica PostgresConfigResponseSessionReplicationRole = "replica"
)

// Defines values for ServiceHealthResponseName.
const (
	ServiceHealthResponseNameAuth     ServiceHealthResponseName = "auth"
	ServiceHealthResponseNameRealtime ServiceHealthResponseName = "realtime"
	ServiceHealthResponseNameRest     ServiceHealthResponseName = "rest"
	ServiceHealthResponseNameStorage  ServiceHealthResponseName = "storage"
)

// Defines values for SnippetMetaType.
const (
	SnippetMetaTypeSql SnippetMetaType = "sql"
)

// Defines values for SnippetMetaVisibility.
const (
	SnippetMetaVisibilityOrg     SnippetMetaVisibility = "org"
	SnippetMetaVisibilityProject SnippetMetaVisibility = "project"
	SnippetMetaVisibilityPublic  SnippetMetaVisibility = "public"
	SnippetMetaVisibilityUser    SnippetMetaVisibility = "user"
)

// Defines values for SnippetResponseType.
const (
	SnippetResponseTypeSql SnippetResponseType = "sql"
)

// Defines values for SnippetResponseVisibility.
const (
	SnippetResponseVisibilityOrg     SnippetResponseVisibility = "org"
	SnippetResponseVisibilityProject SnippetResponseVisibility = "project"
	SnippetResponseVisibilityPublic  SnippetResponseVisibility = "public"
	SnippetResponseVisibilityUser    SnippetResponseVisibility = "user"
)

// Defines values for UpdateCustomHostnameResponseStatus.
const (
	N1NotStarted           UpdateCustomHostnameResponseStatus = "1_not_started"
	N2Initiated            UpdateCustomHostnameResponseStatus = "2_initiated"
	N3ChallengeVerified    UpdateCustomHostnameResponseStatus = "3_challenge_verified"
	N4OriginSetupCompleted UpdateCustomHostnameResponseStatus = "4_origin_setup_completed"
	N5ServicesReconfigured UpdateCustomHostnameResponseStatus = "5_services_reconfigured"
)

// Defines values for UpdatePostgresConfigBodySessionReplicationRole.
const (
	UpdatePostgresConfigBodySessionReplicationRoleLocal   UpdatePostgresConfigBodySessionReplicationRole = "local"
	UpdatePostgresConfigBodySessionReplicationRoleOrigin  UpdatePostgresConfigBodySessionReplicationRole = "origin"
	UpdatePostgresConfigBodySessionReplicationRoleReplica UpdatePostgresConfigBodySessionReplicationRole = "replica"
)

// Defines values for V1PgbouncerConfigResponsePoolMode.
const (
	Session     V1PgbouncerConfigResponsePoolMode = "session"
	Statement   V1PgbouncerConfigResponsePoolMode = "statement"
	Transaction V1PgbouncerConfigResponsePoolMode = "transaction"
)

// Defines values for VanitySubdomainConfigResponseStatus.
const (
	Active           VanitySubdomainConfigResponseStatus = "active"
	CustomDomainUsed VanitySubdomainConfigResponseStatus = "custom-domain-used"
	NotUsed          VanitySubdomainConfigResponseStatus = "not-used"
)

// Defines values for AuthorizeParamsResponseType.
const (
	Code         AuthorizeParamsResponseType = "code"
	IdTokenToken AuthorizeParamsResponseType = "id_token token"
	Token        AuthorizeParamsResponseType = "token"
)

// Defines values for AuthorizeParamsCodeChallengeMethod.
const (
	Plain  AuthorizeParamsCodeChallengeMethod = "plain"
	S256   AuthorizeParamsCodeChallengeMethod = "S256"
	Sha256 AuthorizeParamsCodeChallengeMethod = "sha256"
)

// Defines values for CheckServiceHealthParamsServices.
const (
	CheckServiceHealthParamsServicesAuth     CheckServiceHealthParamsServices = "auth"
	CheckServiceHealthParamsServicesRealtime CheckServiceHealthParamsServices = "realtime"
	CheckServiceHealthParamsServicesRest     CheckServiceHealthParamsServices = "rest"
	CheckServiceHealthParamsServicesStorage  CheckServiceHealthParamsServices = "storage"
)

// ActivateVanitySubdomainResponse defines model for ActivateVanitySubdomainResponse.
type ActivateVanitySubdomainResponse struct {
	CustomDomain string `json:"custom_domain"`
}

// ApiKeyResponse defines model for ApiKeyResponse.
type ApiKeyResponse struct {
	ApiKey string `json:"api_key"`
	Name   string `json:"name"`
}

// AttributeMapping defines model for AttributeMapping.
type AttributeMapping struct {
	Keys map[string]AttributeValue `json:"keys"`
}

// AttributeValue defines model for AttributeValue.
type AttributeValue struct {
	Default *AttributeValue_Default `json:"default,omitempty"`
	Name    *string                 `json:"name,omitempty"`
	Names   *[]string               `json:"names,omitempty"`
}

// AttributeValueDefault0 defines model for .
type AttributeValueDefault0 = map[string]interface{}

// AttributeValueDefault1 defines model for .
type AttributeValueDefault1 = float32

// AttributeValueDefault2 defines model for .
type AttributeValueDefault2 = string

// AttributeValueDefault3 defines model for .
type AttributeValueDefault3 = bool

// AttributeValue_Default defines model for AttributeValue.Default.
type AttributeValue_Default struct {
	union json.RawMessage
}

// AuthConfigResponse defines model for AuthConfigResponse.
type AuthConfigResponse struct {
	RateLimitEmailSent *float32 `json:"rate_limit_email_sent,omitempty"`
	SmtpAdminEmail     *string  `json:"smtp_admin_email,omitempty"`
	SmtpHost           *string  `json:"smtp_host,omitempty"`
	SmtpMaxFrequency   *float32 `json:"smtp_max_frequency,omitempty"`
	SmtpPass           *string  `json:"smtp_pass,omitempty"`
	SmtpPort           *string  `json:"smtp_port,omitempty"`
	SmtpSenderName     *string  `json:"smtp_sender_name,omitempty"`
	SmtpUser           *string  `json:"smtp_user,omitempty"`
}

// AuthHealthResponse defines model for AuthHealthResponse.
type AuthHealthResponse struct {
	Description string `json:"description"`
	Name        string `json:"name"`
	Version     string `json:"version"`
}

// BranchDetailResponse defines model for BranchDetailResponse.
type BranchDetailResponse struct {
	DbHost          string                     `json:"db_host"`
	DbPass          *string                    `json:"db_pass,omitempty"`
	DbPort          int                        `json:"db_port"`
	DbUser          *string                    `json:"db_user,omitempty"`
	JwtSecret       *string                    `json:"jwt_secret,omitempty"`
	PostgresVersion string                     `json:"postgres_version"`
	Ref             string                     `json:"ref"`
	Status          BranchDetailResponseStatus `json:"status"`
}

// BranchDetailResponseStatus defines model for BranchDetailResponse.Status.
type BranchDetailResponseStatus string

// BranchResponse defines model for BranchResponse.
type BranchResponse struct {
	CreatedAt        string  `json:"created_at"`
	GitBranch        *string `json:"git_branch,omitempty"`
	Id               string  `json:"id"`
	IsDefault        bool    `json:"is_default"`
	Name             string  `json:"name"`
	ParentProjectRef string  `json:"parent_project_ref"`
	ProjectRef       string  `json:"project_ref"`
	UpdatedAt        string  `json:"updated_at"`
}

// CreateBranchBody defines model for CreateBranchBody.
type CreateBranchBody struct {
	BranchName string  `json:"branch_name"`
	GitBranch  *string `json:"git_branch,omitempty"`
	Region     *string `json:"region,omitempty"`
}

// CreateFunctionBody defines model for CreateFunctionBody.
type CreateFunctionBody struct {
	Body      string `json:"body"`
	Name      string `json:"name"`
	Slug      string `json:"slug"`
	VerifyJwt *bool  `json:"verify_jwt,omitempty"`
}

// CreateOrganizationBody defines model for CreateOrganizationBody.
type CreateOrganizationBody struct {
	Name string `json:"name"`
}

// CreateProjectBody defines model for CreateProjectBody.
type CreateProjectBody struct {
	// DbPass Database password
	DbPass string `json:"db_pass"`
	// Deprecated:
	KpsEnabled *bool `json:"kps_enabled,omitempty"`

	// Name Name of your project, should not contain dots
	Name string `json:"name"`

	// OrganizationId Slug of your organization
	OrganizationId string `json:"organization_id"`

	// Plan Subscription plan
	Plan CreateProjectBodyPlan `json:"plan"`

	// Region Region you want your server to reside in
	Region CreateProjectBodyRegion `json:"region"`
}

// CreateProjectBodyPlan Subscription plan
type CreateProjectBodyPlan string

// CreateProjectBodyRegion Region you want your server to reside in
type CreateProjectBodyRegion string

// CreateProviderBody defines model for CreateProviderBody.
type CreateProviderBody struct {
	AttributeMapping *AttributeMapping `json:"attribute_mapping,omitempty"`
	Domains          *[]string         `json:"domains,omitempty"`
	MetadataUrl      *string           `json:"metadata_url,omitempty"`
	MetadataXml      *string           `json:"metadata_xml,omitempty"`

	// Type What type of provider will be created
	Type CreateProviderBodyType `json:"type"`
}

// CreateProviderBodyType What type of provider will be created
type CreateProviderBodyType string

// CreateProviderResponse defines model for CreateProviderResponse.
type CreateProviderResponse struct {
	CreatedAt *string         `json:"created_at,omitempty"`
	Domains   *[]Domain       `json:"domains,omitempty"`
	Id        string          `json:"id"`
	Saml      *SamlDescriptor `json:"saml,omitempty"`
	UpdatedAt *string         `json:"updated_at,omitempty"`
}

// CreateSecretBody defines model for CreateSecretBody.
type CreateSecretBody struct {
	// Name Secret name must not start with the SUPABASE_ prefix.
	Name  string `json:"name"`
	Value string `json:"value"`
}

// DatabaseResponse defines model for DatabaseResponse.
type DatabaseResponse struct {
	// Host Database host
	Host string `json:"host"`

	// Version Database version
	Version string `json:"version"`
}

// DatabaseUpgradeStatus defines model for DatabaseUpgradeStatus.
type DatabaseUpgradeStatus struct {
	Error         *DatabaseUpgradeStatusError    `json:"error,omitempty"`
	InitiatedAt   string                         `json:"initiated_at"`
	Progress      *DatabaseUpgradeStatusProgress `json:"progress,omitempty"`
	Status        DatabaseUpgradeStatusStatus    `json:"status"`
	TargetVersion float32                        `json:"target_version"`
}

// DatabaseUpgradeStatusError defines model for DatabaseUpgradeStatus.Error.
type DatabaseUpgradeStatusError string

// DatabaseUpgradeStatusProgress defines model for DatabaseUpgradeStatus.Progress.
type DatabaseUpgradeStatusProgress string

// DatabaseUpgradeStatusStatus defines model for DatabaseUpgradeStatus.Status.
type DatabaseUpgradeStatusStatus float32

// DatabaseUpgradeStatusResponse defines model for DatabaseUpgradeStatusResponse.
type DatabaseUpgradeStatusResponse struct {
	DatabaseUpgradeStatus *DatabaseUpgradeStatus `json:"databaseUpgradeStatus"`
}

// DeleteProviderResponse defines model for DeleteProviderResponse.
type DeleteProviderResponse struct {
	CreatedAt *string         `json:"created_at,omitempty"`
	Domains   *[]Domain       `json:"domains,omitempty"`
	Id        string          `json:"id"`
	Saml      *SamlDescriptor `json:"saml,omitempty"`
	UpdatedAt *string         `json:"updated_at,omitempty"`
}

// Domain defines model for Domain.
type Domain struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Domain    *string `json:"domain,omitempty"`
	Id        string  `json:"id"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// FunctionResponse defines model for FunctionResponse.
type FunctionResponse struct {
	CreatedAt      float32                `json:"created_at"`
	EntrypointPath *string                `json:"entrypoint_path,omitempty"`
	Id             string                 `json:"id"`
	ImportMap      *bool                  `json:"import_map,omitempty"`
	ImportMapPath  *string                `json:"import_map_path,omitempty"`
	Name           string                 `json:"name"`
	Slug           string                 `json:"slug"`
	Status         FunctionResponseStatus `json:"status"`
	UpdatedAt      float32                `json:"updated_at"`
	VerifyJwt      *bool                  `json:"verify_jwt,omitempty"`
	Version        float32                `json:"version"`
}

// FunctionResponseStatus defines model for FunctionResponse.Status.
type FunctionResponseStatus string

// FunctionSlugResponse defines model for FunctionSlugResponse.
type FunctionSlugResponse struct {
	CreatedAt      float32                    `json:"created_at"`
	EntrypointPath *string                    `json:"entrypoint_path,omitempty"`
	Id             string                     `json:"id"`
	ImportMap      *bool                      `json:"import_map,omitempty"`
	ImportMapPath  *string                    `json:"import_map_path,omitempty"`
	Name           string                     `json:"name"`
	Slug           string                     `json:"slug"`
	Status         FunctionSlugResponseStatus `json:"status"`
	UpdatedAt      float32                    `json:"updated_at"`
	VerifyJwt      *bool                      `json:"verify_jwt,omitempty"`
	Version        float32                    `json:"version"`
}

// FunctionSlugResponseStatus defines model for FunctionSlugResponse.Status.
type FunctionSlugResponseStatus string

// GetProviderResponse defines model for GetProviderResponse.
type GetProviderResponse struct {
	CreatedAt *string         `json:"created_at,omitempty"`
	Domains   *[]Domain       `json:"domains,omitempty"`
	Id        string          `json:"id"`
	Saml      *SamlDescriptor `json:"saml,omitempty"`
	UpdatedAt *string         `json:"updated_at,omitempty"`
}

// ListProvidersResponse defines model for ListProvidersResponse.
type ListProvidersResponse struct {
	Items []Provider `json:"items"`
}

// NetworkBanResponse defines model for NetworkBanResponse.
type NetworkBanResponse struct {
	BannedIpv4Addresses []string `json:"banned_ipv4_addresses"`
}

// NetworkRestrictionsRequest defines model for NetworkRestrictionsRequest.
type NetworkRestrictionsRequest struct {
	DbAllowedCidrs []string `json:"dbAllowedCidrs"`
}

// NetworkRestrictionsResponse defines model for NetworkRestrictionsResponse.
type NetworkRestrictionsResponse struct {
	Config      NetworkRestrictionsRequest             `json:"config"`
	Entitlement NetworkRestrictionsResponseEntitlement `json:"entitlement"`
	OldConfig   *NetworkRestrictionsRequest            `json:"old_config,omitempty"`
	Status      NetworkRestrictionsResponseStatus      `json:"status"`
}

// NetworkRestrictionsResponseEntitlement defines model for NetworkRestrictionsResponse.Entitlement.
type NetworkRestrictionsResponseEntitlement string

// NetworkRestrictionsResponseStatus defines model for NetworkRestrictionsResponse.Status.
type NetworkRestrictionsResponseStatus string

// OAuthTokenBody defines model for OAuthTokenBody.
type OAuthTokenBody struct {
	ClientId     string                  `json:"client_id"`
	ClientSecret string                  `json:"client_secret"`
	Code         *string                 `json:"code,omitempty"`
	CodeVerifier *string                 `json:"code_verifier,omitempty"`
	GrantType    OAuthTokenBodyGrantType `json:"grant_type"`
	RedirectUri  *string                 `json:"redirect_uri,omitempty"`
	RefreshToken *string                 `json:"refresh_token,omitempty"`
}

// OAuthTokenBodyGrantType defines model for OAuthTokenBody.GrantType.
type OAuthTokenBodyGrantType string

// OAuthTokenResponse defines model for OAuthTokenResponse.
type OAuthTokenResponse struct {
	AccessToken  string                      `json:"access_token"`
	ExpiresIn    float32                     `json:"expires_in"`
	RefreshToken string                      `json:"refresh_token"`
	TokenType    OAuthTokenResponseTokenType `json:"token_type"`
}

// OAuthTokenResponseTokenType defines model for OAuthTokenResponse.TokenType.
type OAuthTokenResponseTokenType string

// OrganizationResponse defines model for OrganizationResponse.
type OrganizationResponse struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// PgsodiumConfigResponse defines model for PgsodiumConfigResponse.
type PgsodiumConfigResponse struct {
	RootKey string `json:"root_key"`
}

// PostgresConfigResponse defines model for PostgresConfigResponse.
type PostgresConfigResponse struct {
	EffectiveCacheSize            *string                                       `json:"effective_cache_size,omitempty"`
	MaintenanceWorkMem            *string                                       `json:"maintenance_work_mem,omitempty"`
	MaxConnections                *int                                          `json:"max_connections,omitempty"`
	MaxParallelMaintenanceWorkers *int                                          `json:"max_parallel_maintenance_workers,omitempty"`
	MaxParallelWorkers            *int                                          `json:"max_parallel_workers,omitempty"`
	MaxParallelWorkersPerGather   *int                                          `json:"max_parallel_workers_per_gather,omitempty"`
	MaxWorkerProcesses            *int                                          `json:"max_worker_processes,omitempty"`
	SessionReplicationRole        *PostgresConfigResponseSessionReplicationRole `json:"session_replication_role,omitempty"`
	SharedBuffers                 *string                                       `json:"shared_buffers,omitempty"`
	StatementTimeout              *string                                       `json:"statement_timeout,omitempty"`
	WorkMem                       *string                                       `json:"work_mem,omitempty"`
}

// PostgresConfigResponseSessionReplicationRole defines model for PostgresConfigResponse.SessionReplicationRole.
type PostgresConfigResponseSessionReplicationRole string

// PostgrestConfigResponse defines model for PostgrestConfigResponse.
type PostgrestConfigResponse struct {
	DbExtraSearchPath string `json:"db_extra_search_path"`
	DbSchema          string `json:"db_schema"`
	MaxRows           int    `json:"max_rows"`
}

// PostgrestConfigWithJWTSecretResponse defines model for PostgrestConfigWithJWTSecretResponse.
type PostgrestConfigWithJWTSecretResponse struct {
	DbExtraSearchPath string  `json:"db_extra_search_path"`
	DbSchema          string  `json:"db_schema"`
	JwtSecret         *string `json:"jwt_secret,omitempty"`
	MaxRows           int     `json:"max_rows"`
}

// ProjectRefResponse defines model for ProjectRefResponse.
type ProjectRefResponse struct {
	Id   float32 `json:"id"`
	Name string  `json:"name"`
	Ref  string  `json:"ref"`
}

// ProjectResponse defines model for ProjectResponse.
type ProjectResponse struct {
	// CreatedAt Creation timestamp
	CreatedAt string            `json:"created_at"`
	Database  *DatabaseResponse `json:"database,omitempty"`

	// Id Id of your project
	Id string `json:"id"`

	// Name Name of your project
	Name string `json:"name"`

	// OrganizationId Slug of your organization
	OrganizationId string `json:"organization_id"`

	// Region Region of your project
	Region string `json:"region"`
}

// ProjectUpgradeEligibilityResponse defines model for ProjectUpgradeEligibilityResponse.
type ProjectUpgradeEligibilityResponse struct {
	CurrentAppVersion          string           `json:"current_app_version"`
	Eligible                   bool             `json:"eligible"`
	LatestAppVersion           string           `json:"latest_app_version"`
	PotentialBreakingChanges   []string         `json:"potential_breaking_changes"`
	RequiresManualIntervention *string          `json:"requires_manual_intervention"`
	TargetUpgradeVersions      []ProjectVersion `json:"target_upgrade_versions"`
}

// ProjectVersion defines model for ProjectVersion.
type ProjectVersion struct {
	AppVersion      string  `json:"app_version"`
	PostgresVersion float32 `json:"postgres_version"`
}

// Provider defines model for Provider.
type Provider struct {
	CreatedAt *string         `json:"created_at,omitempty"`
	Domains   *[]Domain       `json:"domains,omitempty"`
	Id        string          `json:"id"`
	Saml      *SamlDescriptor `json:"saml,omitempty"`
	UpdatedAt *string         `json:"updated_at,omitempty"`
}

// ReadOnlyStatusResponse defines model for ReadOnlyStatusResponse.
type ReadOnlyStatusResponse struct {
	Enabled             bool   `json:"enabled"`
	OverrideActiveUntil string `json:"override_active_until"`
	OverrideEnabled     bool   `json:"override_enabled"`
}

// RealtimeHealthResponse defines model for RealtimeHealthResponse.
type RealtimeHealthResponse struct {
	ConnectedCluster float32 `json:"connected_cluster"`
	DbConnected      bool    `json:"db_connected"`
	Healthy          bool    `json:"healthy"`
}

// RemoveNetworkBanRequest defines model for RemoveNetworkBanRequest.
type RemoveNetworkBanRequest struct {
	Ipv4Addresses []string `json:"ipv4_addresses"`
}

// RunQueryBody defines model for RunQueryBody.
type RunQueryBody struct {
	Query string `json:"query"`
}

// SamlDescriptor defines model for SamlDescriptor.
type SamlDescriptor struct {
	AttributeMapping *AttributeMapping `json:"attribute_mapping,omitempty"`
	EntityId         string            `json:"entity_id"`
	Id               string            `json:"id"`
	MetadataUrl      *string           `json:"metadata_url,omitempty"`
	MetadataXml      *string           `json:"metadata_xml,omitempty"`
}

// SecretResponse defines model for SecretResponse.
type SecretResponse struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// ServiceHealthResponse defines model for ServiceHealthResponse.
type ServiceHealthResponse struct {
	Error   *string                     `json:"error,omitempty"`
	Healthy bool                        `json:"healthy"`
	Info    *ServiceHealthResponse_Info `json:"info,omitempty"`
	Name    ServiceHealthResponseName   `json:"name"`
}

// ServiceHealthResponse_Info defines model for ServiceHealthResponse.Info.
type ServiceHealthResponse_Info struct {
	union json.RawMessage
}

// ServiceHealthResponseName defines model for ServiceHealthResponse.Name.
type ServiceHealthResponseName string

// SnippetContent defines model for SnippetContent.
type SnippetContent struct {
	Favorite      bool   `json:"favorite"`
	SchemaVersion string `json:"schema_version"`
	Sql           string `json:"sql"`
}

// SnippetList defines model for SnippetList.
type SnippetList struct {
	Data []SnippetMeta `json:"data"`
}

// SnippetMeta defines model for SnippetMeta.
type SnippetMeta struct {
	Description *string               `json:"description"`
	Id          string                `json:"id"`
	InsertedAt  string                `json:"inserted_at"`
	Name        string                `json:"name"`
	Owner       SnippetUser           `json:"owner"`
	Project     SnippetProject        `json:"project"`
	Type        SnippetMetaType       `json:"type"`
	UpdatedAt   string                `json:"updated_at"`
	UpdatedBy   SnippetUser           `json:"updated_by"`
	Visibility  SnippetMetaVisibility `json:"visibility"`
}

// SnippetMetaType defines model for SnippetMeta.Type.
type SnippetMetaType string

// SnippetMetaVisibility defines model for SnippetMeta.Visibility.
type SnippetMetaVisibility string

// SnippetProject defines model for SnippetProject.
type SnippetProject struct {
	Id   float32 `json:"id"`
	Name string  `json:"name"`
}

// SnippetResponse defines model for SnippetResponse.
type SnippetResponse struct {
	Content     SnippetContent            `json:"content"`
	Description *string                   `json:"description"`
	Id          string                    `json:"id"`
	InsertedAt  string                    `json:"inserted_at"`
	Name        string                    `json:"name"`
	Owner       SnippetUser               `json:"owner"`
	Project     SnippetProject            `json:"project"`
	Type        SnippetResponseType       `json:"type"`
	UpdatedAt   string                    `json:"updated_at"`
	UpdatedBy   SnippetUser               `json:"updated_by"`
	Visibility  SnippetResponseVisibility `json:"visibility"`
}

// SnippetResponseType defines model for SnippetResponse.Type.
type SnippetResponseType string

// SnippetResponseVisibility defines model for SnippetResponse.Visibility.
type SnippetResponseVisibility string

// SnippetUser defines model for SnippetUser.
type SnippetUser struct {
	Id       float32 `json:"id"`
	Username string  `json:"username"`
}

// SslEnforcementRequest defines model for SslEnforcementRequest.
type SslEnforcementRequest struct {
	RequestedConfig SslEnforcements `json:"requestedConfig"`
}

// SslEnforcementResponse defines model for SslEnforcementResponse.
type SslEnforcementResponse struct {
	AppliedSuccessfully bool            `json:"appliedSuccessfully"`
	CurrentConfig       SslEnforcements `json:"currentConfig"`
}

// SslEnforcements defines model for SslEnforcements.
type SslEnforcements struct {
	Database bool `json:"database"`
}

// SubdomainAvailabilityResponse defines model for SubdomainAvailabilityResponse.
type SubdomainAvailabilityResponse struct {
	Available bool `json:"available"`
}

// TypescriptResponse defines model for TypescriptResponse.
type TypescriptResponse struct {
	Types string `json:"types"`
}

// UpdateAuthConfigBody defines model for UpdateAuthConfigBody.
type UpdateAuthConfigBody struct {
	RateLimitEmailSent *float32 `json:"rate_limit_email_sent,omitempty"`
	SmtpAdminEmail     *string  `json:"smtp_admin_email,omitempty"`
	SmtpHost           *string  `json:"smtp_host,omitempty"`
	SmtpMaxFrequency   *float32 `json:"smtp_max_frequency,omitempty"`
	SmtpPass           *string  `json:"smtp_pass,omitempty"`
	SmtpPort           *string  `json:"smtp_port,omitempty"`
	SmtpSenderName     *string  `json:"smtp_sender_name,omitempty"`
	SmtpUser           *string  `json:"smtp_user,omitempty"`
}

// UpdateBranchBody defines model for UpdateBranchBody.
type UpdateBranchBody struct {
	BranchName *string `json:"branch_name,omitempty"`
	GitBranch  *string `json:"git_branch,omitempty"`
}

// UpdateCustomHostnameBody defines model for UpdateCustomHostnameBody.
type UpdateCustomHostnameBody struct {
	CustomHostname string `json:"custom_hostname"`
}

// UpdateCustomHostnameResponse defines model for UpdateCustomHostnameResponse.
type UpdateCustomHostnameResponse struct {
	CustomHostname string                             `json:"custom_hostname"`
	Data           map[string]interface{}             `json:"data"`
	Status         UpdateCustomHostnameResponseStatus `json:"status"`
}

// UpdateCustomHostnameResponseStatus defines model for UpdateCustomHostnameResponse.Status.
type UpdateCustomHostnameResponseStatus string

// UpdateFunctionBody defines model for UpdateFunctionBody.
type UpdateFunctionBody struct {
	Body      *string `json:"body,omitempty"`
	Name      *string `json:"name,omitempty"`
	VerifyJwt *bool   `json:"verify_jwt,omitempty"`
}

// UpdatePgsodiumConfigBody defines model for UpdatePgsodiumConfigBody.
type UpdatePgsodiumConfigBody struct {
	RootKey string `json:"root_key"`
}

// UpdatePostgresConfigBody defines model for UpdatePostgresConfigBody.
type UpdatePostgresConfigBody struct {
	EffectiveCacheSize            *string                                         `json:"effective_cache_size,omitempty"`
	MaintenanceWorkMem            *string                                         `json:"maintenance_work_mem,omitempty"`
	MaxConnections                *int                                            `json:"max_connections,omitempty"`
	MaxParallelMaintenanceWorkers *int                                            `json:"max_parallel_maintenance_workers,omitempty"`
	MaxParallelWorkers            *int                                            `json:"max_parallel_workers,omitempty"`
	MaxParallelWorkersPerGather   *int                                            `json:"max_parallel_workers_per_gather,omitempty"`
	MaxWorkerProcesses            *int                                            `json:"max_worker_processes,omitempty"`
	SessionReplicationRole        *UpdatePostgresConfigBodySessionReplicationRole `json:"session_replication_role,omitempty"`
	SharedBuffers                 *string                                         `json:"shared_buffers,omitempty"`
	StatementTimeout              *string                                         `json:"statement_timeout,omitempty"`
	WorkMem                       *string                                         `json:"work_mem,omitempty"`
}

// UpdatePostgresConfigBodySessionReplicationRole defines model for UpdatePostgresConfigBody.SessionReplicationRole.
type UpdatePostgresConfigBodySessionReplicationRole string

// UpdatePostgrestConfigBody defines model for UpdatePostgrestConfigBody.
type UpdatePostgrestConfigBody struct {
	DbExtraSearchPath *string `json:"db_extra_search_path,omitempty"`
	DbSchema          *string `json:"db_schema,omitempty"`
	MaxRows           *int    `json:"max_rows,omitempty"`
}

// UpdateProviderBody defines model for UpdateProviderBody.
type UpdateProviderBody struct {
	AttributeMapping *AttributeMapping `json:"attribute_mapping,omitempty"`
	Domains          *[]string         `json:"domains,omitempty"`
	MetadataUrl      *string           `json:"metadata_url,omitempty"`
	MetadataXml      *string           `json:"metadata_xml,omitempty"`
}

// UpdateProviderResponse defines model for UpdateProviderResponse.
type UpdateProviderResponse struct {
	CreatedAt *string         `json:"created_at,omitempty"`
	Domains   *[]Domain       `json:"domains,omitempty"`
	Id        string          `json:"id"`
	Saml      *SamlDescriptor `json:"saml,omitempty"`
	UpdatedAt *string         `json:"updated_at,omitempty"`
}

// UpgradeDatabaseBody defines model for UpgradeDatabaseBody.
type UpgradeDatabaseBody struct {
	TargetVersion float32 `json:"target_version"`
}

// V1OrganizationMemberResponse defines model for V1OrganizationMemberResponse.
type V1OrganizationMemberResponse struct {
	Email    *string `json:"email,omitempty"`
	RoleName string  `json:"role_name"`
	UserId   string  `json:"user_id"`
	UserName string  `json:"user_name"`
}

// V1PgbouncerConfigResponse defines model for V1PgbouncerConfigResponse.
type V1PgbouncerConfigResponse struct {
	DefaultPoolSize         *float32                           `json:"default_pool_size,omitempty"`
	IgnoreStartupParameters *string                            `json:"ignore_startup_parameters,omitempty"`
	MaxClientConn           *float32                           `json:"max_client_conn,omitempty"`
	PoolMode                *V1PgbouncerConfigResponsePoolMode `json:"pool_mode,omitempty"`
}

// V1PgbouncerConfigResponsePoolMode defines model for V1PgbouncerConfigResponse.PoolMode.
type V1PgbouncerConfigResponsePoolMode string

// V1RestorePitrBody defines model for V1RestorePitrBody.
type V1RestorePitrBody struct {
	RecoveryTimeTargetUnix float32 `json:"recovery_time_target_unix"`
}

// VanitySubdomainBody defines model for VanitySubdomainBody.
type VanitySubdomainBody struct {
	VanitySubdomain string `json:"vanity_subdomain"`
}

// VanitySubdomainConfigResponse defines model for VanitySubdomainConfigResponse.
type VanitySubdomainConfigResponse struct {
	CustomDomain *string                             `json:"custom_domain,omitempty"`
	Status       VanitySubdomainConfigResponseStatus `json:"status"`
}

// VanitySubdomainConfigResponseStatus defines model for VanitySubdomainConfigResponse.Status.
type VanitySubdomainConfigResponseStatus string

// AuthorizeParams defines parameters for Authorize.
type AuthorizeParams struct {
	ClientId            string                              `form:"client_id" json:"client_id"`
	ResponseType        AuthorizeParamsResponseType         `form:"response_type" json:"response_type"`
	RedirectUri         string                              `form:"redirect_uri" json:"redirect_uri"`
	Scope               *string                             `form:"scope,omitempty" json:"scope,omitempty"`
	State               *string                             `form:"state,omitempty" json:"state,omitempty"`
	ResponseMode        *string                             `form:"response_mode,omitempty" json:"response_mode,omitempty"`
	CodeChallenge       *string                             `form:"code_challenge,omitempty" json:"code_challenge,omitempty"`
	CodeChallengeMethod *AuthorizeParamsCodeChallengeMethod `form:"code_challenge_method,omitempty" json:"code_challenge_method,omitempty"`
}

// AuthorizeParamsResponseType defines parameters for Authorize.
type AuthorizeParamsResponseType string

// AuthorizeParamsCodeChallengeMethod defines parameters for Authorize.
type AuthorizeParamsCodeChallengeMethod string

// CreateFunctionParams defines parameters for CreateFunction.
type CreateFunctionParams struct {
	Slug           *string `form:"slug,omitempty" json:"slug,omitempty"`
	Name           *string `form:"name,omitempty" json:"name,omitempty"`
	VerifyJwt      *bool   `form:"verify_jwt,omitempty" json:"verify_jwt,omitempty"`
	ImportMap      *bool   `form:"import_map,omitempty" json:"import_map,omitempty"`
	EntrypointPath *string `form:"entrypoint_path,omitempty" json:"entrypoint_path,omitempty"`
	ImportMapPath  *string `form:"import_map_path,omitempty" json:"import_map_path,omitempty"`
}

// UpdateFunctionParams defines parameters for UpdateFunction.
type UpdateFunctionParams struct {
	Slug           *string `form:"slug,omitempty" json:"slug,omitempty"`
	Name           *string `form:"name,omitempty" json:"name,omitempty"`
	VerifyJwt      *bool   `form:"verify_jwt,omitempty" json:"verify_jwt,omitempty"`
	ImportMap      *bool   `form:"import_map,omitempty" json:"import_map,omitempty"`
	EntrypointPath *string `form:"entrypoint_path,omitempty" json:"entrypoint_path,omitempty"`
	ImportMapPath  *string `form:"import_map_path,omitempty" json:"import_map_path,omitempty"`
}

// CheckServiceHealthParams defines parameters for CheckServiceHealth.
type CheckServiceHealthParams struct {
	TimeoutMs *int                               `form:"timeout_ms,omitempty" json:"timeout_ms,omitempty"`
	Services  []CheckServiceHealthParamsServices `form:"services" json:"services"`
}

// CheckServiceHealthParamsServices defines parameters for CheckServiceHealth.
type CheckServiceHealthParamsServices string

// DeleteSecretsJSONBody defines parameters for DeleteSecrets.
type DeleteSecretsJSONBody = []string

// CreateSecretsJSONBody defines parameters for CreateSecrets.
type CreateSecretsJSONBody = []CreateSecretBody

// GetTypescriptTypesParams defines parameters for GetTypescriptTypes.
type GetTypescriptTypesParams struct {
	IncludedSchemas *string `form:"included_schemas,omitempty" json:"included_schemas,omitempty"`
}

// ListSnippetsParams defines parameters for ListSnippets.
type ListSnippetsParams struct {
	ProjectRef *string `form:"project_ref,omitempty" json:"project_ref,omitempty"`
}

// UpdateBranchJSONRequestBody defines body for UpdateBranch for application/json ContentType.
type UpdateBranchJSONRequestBody = UpdateBranchBody

// TokenFormdataRequestBody defines body for Token for application/x-www-form-urlencoded ContentType.
type TokenFormdataRequestBody = OAuthTokenBody

// CreateOrganizationJSONRequestBody defines body for CreateOrganization for application/json ContentType.
type CreateOrganizationJSONRequestBody = CreateOrganizationBody

// CreateProjectJSONRequestBody defines body for CreateProject for application/json ContentType.
type CreateProjectJSONRequestBody = CreateProjectBody

// CreateBranchJSONRequestBody defines body for CreateBranch for application/json ContentType.
type CreateBranchJSONRequestBody = CreateBranchBody

// UpdateV1AuthConfigJSONRequestBody defines body for UpdateV1AuthConfig for application/json ContentType.
type UpdateV1AuthConfigJSONRequestBody = UpdateAuthConfigBody

// CreateProviderForProjectJSONRequestBody defines body for CreateProviderForProject for application/json ContentType.
type CreateProviderForProjectJSONRequestBody = CreateProviderBody

// UpdateProviderByIdJSONRequestBody defines body for UpdateProviderById for application/json ContentType.
type UpdateProviderByIdJSONRequestBody = UpdateProviderBody

// UpdateConfigJSONRequestBody defines body for UpdateConfig for application/json ContentType.
type UpdateConfigJSONRequestBody = UpdatePostgresConfigBody

// CreateCustomHostnameConfigJSONRequestBody defines body for CreateCustomHostnameConfig for application/json ContentType.
type CreateCustomHostnameConfigJSONRequestBody = UpdateCustomHostnameBody

// V1RestorePitrJSONRequestBody defines body for V1RestorePitr for application/json ContentType.
type V1RestorePitrJSONRequestBody = V1RestorePitrBody

// V1RunQueryJSONRequestBody defines body for V1RunQuery for application/json ContentType.
type V1RunQueryJSONRequestBody = RunQueryBody

// CreateFunctionJSONRequestBody defines body for CreateFunction for application/json ContentType.
type CreateFunctionJSONRequestBody = CreateFunctionBody

// UpdateFunctionJSONRequestBody defines body for UpdateFunction for application/json ContentType.
type UpdateFunctionJSONRequestBody = UpdateFunctionBody

// RemoveNetworkBanJSONRequestBody defines body for RemoveNetworkBan for application/json ContentType.
type RemoveNetworkBanJSONRequestBody = RemoveNetworkBanRequest

// ApplyNetworkRestrictionsJSONRequestBody defines body for ApplyNetworkRestrictions for application/json ContentType.
type ApplyNetworkRestrictionsJSONRequestBody = NetworkRestrictionsRequest

// UpdatePgsodiumConfigJSONRequestBody defines body for UpdatePgsodiumConfig for application/json ContentType.
type UpdatePgsodiumConfigJSONRequestBody = UpdatePgsodiumConfigBody

// UpdatePostgRESTConfigJSONRequestBody defines body for UpdatePostgRESTConfig for application/json ContentType.
type UpdatePostgRESTConfigJSONRequestBody = UpdatePostgrestConfigBody

// DeleteSecretsJSONRequestBody defines body for DeleteSecrets for application/json ContentType.
type DeleteSecretsJSONRequestBody = DeleteSecretsJSONBody

// CreateSecretsJSONRequestBody defines body for CreateSecrets for application/json ContentType.
type CreateSecretsJSONRequestBody = CreateSecretsJSONBody

// UpdateSslEnforcementConfigJSONRequestBody defines body for UpdateSslEnforcementConfig for application/json ContentType.
type UpdateSslEnforcementConfigJSONRequestBody = SslEnforcementRequest

// UpgradeProjectJSONRequestBody defines body for UpgradeProject for application/json ContentType.
type UpgradeProjectJSONRequestBody = UpgradeDatabaseBody

// ActivateVanitySubdomainPleaseJSONRequestBody defines body for ActivateVanitySubdomainPlease for application/json ContentType.
type ActivateVanitySubdomainPleaseJSONRequestBody = VanitySubdomainBody

// CheckVanitySubdomainAvailabilityJSONRequestBody defines body for CheckVanitySubdomainAvailability for application/json ContentType.
type CheckVanitySubdomainAvailabilityJSONRequestBody = VanitySubdomainBody

// AsAttributeValueDefault0 returns the union data inside the AttributeValue_Default as a AttributeValueDefault0
func (t AttributeValue_Default) AsAttributeValueDefault0() (AttributeValueDefault0, error) {
	var body AttributeValueDefault0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttributeValueDefault0 overwrites any union data inside the AttributeValue_Default as the provided AttributeValueDefault0
func (t *AttributeValue_Default) FromAttributeValueDefault0(v AttributeValueDefault0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttributeValueDefault0 performs a merge with any union data inside the AttributeValue_Default, using the provided AttributeValueDefault0
func (t *AttributeValue_Default) MergeAttributeValueDefault0(v AttributeValueDefault0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAttributeValueDefault1 returns the union data inside the AttributeValue_Default as a AttributeValueDefault1
func (t AttributeValue_Default) AsAttributeValueDefault1() (AttributeValueDefault1, error) {
	var body AttributeValueDefault1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttributeValueDefault1 overwrites any union data inside the AttributeValue_Default as the provided AttributeValueDefault1
func (t *AttributeValue_Default) FromAttributeValueDefault1(v AttributeValueDefault1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttributeValueDefault1 performs a merge with any union data inside the AttributeValue_Default, using the provided AttributeValueDefault1
func (t *AttributeValue_Default) MergeAttributeValueDefault1(v AttributeValueDefault1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAttributeValueDefault2 returns the union data inside the AttributeValue_Default as a AttributeValueDefault2
func (t AttributeValue_Default) AsAttributeValueDefault2() (AttributeValueDefault2, error) {
	var body AttributeValueDefault2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttributeValueDefault2 overwrites any union data inside the AttributeValue_Default as the provided AttributeValueDefault2
func (t *AttributeValue_Default) FromAttributeValueDefault2(v AttributeValueDefault2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttributeValueDefault2 performs a merge with any union data inside the AttributeValue_Default, using the provided AttributeValueDefault2
func (t *AttributeValue_Default) MergeAttributeValueDefault2(v AttributeValueDefault2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsAttributeValueDefault3 returns the union data inside the AttributeValue_Default as a AttributeValueDefault3
func (t AttributeValue_Default) AsAttributeValueDefault3() (AttributeValueDefault3, error) {
	var body AttributeValueDefault3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAttributeValueDefault3 overwrites any union data inside the AttributeValue_Default as the provided AttributeValueDefault3
func (t *AttributeValue_Default) FromAttributeValueDefault3(v AttributeValueDefault3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAttributeValueDefault3 performs a merge with any union data inside the AttributeValue_Default, using the provided AttributeValueDefault3
func (t *AttributeValue_Default) MergeAttributeValueDefault3(v AttributeValueDefault3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t AttributeValue_Default) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *AttributeValue_Default) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsAuthHealthResponse returns the union data inside the ServiceHealthResponse_Info as a AuthHealthResponse
func (t ServiceHealthResponse_Info) AsAuthHealthResponse() (AuthHealthResponse, error) {
	var body AuthHealthResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromAuthHealthResponse overwrites any union data inside the ServiceHealthResponse_Info as the provided AuthHealthResponse
func (t *ServiceHealthResponse_Info) FromAuthHealthResponse(v AuthHealthResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeAuthHealthResponse performs a merge with any union data inside the ServiceHealthResponse_Info, using the provided AuthHealthResponse
func (t *ServiceHealthResponse_Info) MergeAuthHealthResponse(v AuthHealthResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsRealtimeHealthResponse returns the union data inside the ServiceHealthResponse_Info as a RealtimeHealthResponse
func (t ServiceHealthResponse_Info) AsRealtimeHealthResponse() (RealtimeHealthResponse, error) {
	var body RealtimeHealthResponse
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromRealtimeHealthResponse overwrites any union data inside the ServiceHealthResponse_Info as the provided RealtimeHealthResponse
func (t *ServiceHealthResponse_Info) FromRealtimeHealthResponse(v RealtimeHealthResponse) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeRealtimeHealthResponse performs a merge with any union data inside the ServiceHealthResponse_Info, using the provided RealtimeHealthResponse
func (t *ServiceHealthResponse_Info) MergeRealtimeHealthResponse(v RealtimeHealthResponse) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ServiceHealthResponse_Info) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ServiceHealthResponse_Info) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteBranch request
	DeleteBranch(ctx context.Context, branchId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBranchDetails request
	GetBranchDetails(ctx context.Context, branchId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateBranchWithBody request with any body
	UpdateBranchWithBody(ctx context.Context, branchId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateBranch(ctx context.Context, branchId string, body UpdateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Authorize request
	Authorize(ctx context.Context, params *AuthorizeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TokenWithBody request with any body
	TokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	TokenWithFormdataBody(ctx context.Context, body TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizations request
	GetOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateOrganizationWithBody request with any body
	CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1ListOrganizationMembers request
	V1ListOrganizationMembers(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjects request
	GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProjectWithBody request with any body
	CreateProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProject(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteProject request
	DeleteProject(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProjectApiKeys request
	GetProjectApiKeys(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisableBranch request
	DisableBranch(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBranches request
	GetBranches(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateBranchWithBody request with any body
	CreateBranchWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateBranch(ctx context.Context, ref string, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetV1AuthConfig request
	GetV1AuthConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateV1AuthConfigWithBody request with any body
	UpdateV1AuthConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateV1AuthConfig(ctx context.Context, ref string, body UpdateV1AuthConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAllProviders request
	ListAllProviders(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateProviderForProjectWithBody request with any body
	CreateProviderForProjectWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateProviderForProject(ctx context.Context, ref string, body CreateProviderForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveProviderById request
	RemoveProviderById(ctx context.Context, ref string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProviderById request
	GetProviderById(ctx context.Context, ref string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateProviderByIdWithBody request with any body
	UpdateProviderByIdWithBody(ctx context.Context, ref string, providerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateProviderById(ctx context.Context, ref string, providerId string, body UpdateProviderByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1GetPgbouncerConfig request
	V1GetPgbouncerConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConfig request
	GetConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConfigWithBody request with any body
	UpdateConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateConfig(ctx context.Context, ref string, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveCustomHostnameConfig request
	RemoveCustomHostnameConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCustomHostnameConfig request
	GetCustomHostnameConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Activate request
	Activate(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCustomHostnameConfigWithBody request with any body
	CreateCustomHostnameConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateCustomHostnameConfig(ctx context.Context, ref string, body CreateCustomHostnameConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Reverify request
	Reverify(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1RestorePitrWithBody request with any body
	V1RestorePitrWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1RestorePitr(ctx context.Context, ref string, body V1RestorePitrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1RunQueryWithBody request with any body
	V1RunQueryWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	V1RunQuery(ctx context.Context, ref string, body V1RunQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// V1EnableDatabaseWebhooks request
	V1EnableDatabaseWebhooks(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctions request
	GetFunctions(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateFunctionWithBody request with any body
	CreateFunctionWithBody(ctx context.Context, ref string, params *CreateFunctionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateFunction(ctx context.Context, ref string, params *CreateFunctionParams, body CreateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteFunction request
	DeleteFunction(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunction request
	GetFunction(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateFunctionWithBody request with any body
	UpdateFunctionWithBody(ctx context.Context, ref string, functionSlug string, params *UpdateFunctionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateFunction(ctx context.Context, ref string, functionSlug string, params *UpdateFunctionParams, body UpdateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFunctionBody request
	GetFunctionBody(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckServiceHealth request
	CheckServiceHealth(ctx context.Context, ref string, params *CheckServiceHealthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveNetworkBanWithBody request with any body
	RemoveNetworkBanWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RemoveNetworkBan(ctx context.Context, ref string, body RemoveNetworkBanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetworkBans request
	GetNetworkBans(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNetworkRestrictions request
	GetNetworkRestrictions(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ApplyNetworkRestrictionsWithBody request with any body
	ApplyNetworkRestrictionsWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ApplyNetworkRestrictions(ctx context.Context, ref string, body ApplyNetworkRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPgsodiumConfig request
	GetPgsodiumConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePgsodiumConfigWithBody request with any body
	UpdatePgsodiumConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePgsodiumConfig(ctx context.Context, ref string, body UpdatePgsodiumConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPostgRESTConfig request
	GetPostgRESTConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePostgRESTConfigWithBody request with any body
	UpdatePostgRESTConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdatePostgRESTConfig(ctx context.Context, ref string, body UpdatePostgRESTConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetReadOnlyModeStatus request
	GetReadOnlyModeStatus(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TemporarilyDisableReadonlyMode request
	TemporarilyDisableReadonlyMode(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSecretsWithBody request with any body
	DeleteSecretsWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteSecrets(ctx context.Context, ref string, body DeleteSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSecrets request
	GetSecrets(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSecretsWithBody request with any body
	CreateSecretsWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateSecrets(ctx context.Context, ref string, body CreateSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSslEnforcementConfig request
	GetSslEnforcementConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSslEnforcementConfigWithBody request with any body
	UpdateSslEnforcementConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateSslEnforcementConfig(ctx context.Context, ref string, body UpdateSslEnforcementConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTypescriptTypes request
	GetTypescriptTypes(ctx context.Context, ref string, params *GetTypescriptTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpgradeProjectWithBody request with any body
	UpgradeProjectWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpgradeProject(ctx context.Context, ref string, body UpgradeProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpgradeEligibilityInformation request
	UpgradeEligibilityInformation(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUpgradeStatus request
	GetUpgradeStatus(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveVanitySubdomainConfig request
	RemoveVanitySubdomainConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVanitySubdomainConfig request
	GetVanitySubdomainConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ActivateVanitySubdomainPleaseWithBody request with any body
	ActivateVanitySubdomainPleaseWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ActivateVanitySubdomainPlease(ctx context.Context, ref string, body ActivateVanitySubdomainPleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CheckVanitySubdomainAvailabilityWithBody request with any body
	CheckVanitySubdomainAvailabilityWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CheckVanitySubdomainAvailability(ctx context.Context, ref string, body CheckVanitySubdomainAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSnippets request
	ListSnippets(ctx context.Context, params *ListSnippetsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSnippet request
	GetSnippet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteBranch(ctx context.Context, branchId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteBranchRequest(c.Server, branchId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranchDetails(ctx context.Context, branchId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchDetailsRequest(c.Server, branchId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBranchWithBody(ctx context.Context, branchId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBranchRequestWithBody(c.Server, branchId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateBranch(ctx context.Context, branchId string, body UpdateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateBranchRequest(c.Server, branchId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Authorize(ctx context.Context, params *AuthorizeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAuthorizeRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TokenWithFormdataBody(ctx context.Context, body TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTokenRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganizationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateOrganization(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateOrganizationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1ListOrganizationMembers(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1ListOrganizationMembersRequest(c.Server, slug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProjectWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProject(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProjectRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteProject(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteProjectRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProjectApiKeys(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProjectApiKeysRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableBranch(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableBranchRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBranches(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBranchesRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBranchWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBranchRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateBranch(ctx context.Context, ref string, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateBranchRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetV1AuthConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetV1AuthConfigRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateV1AuthConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateV1AuthConfigRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateV1AuthConfig(ctx context.Context, ref string, body UpdateV1AuthConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateV1AuthConfigRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAllProviders(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAllProvidersRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProviderForProjectWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProviderForProjectRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateProviderForProject(ctx context.Context, ref string, body CreateProviderForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateProviderForProjectRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveProviderById(ctx context.Context, ref string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveProviderByIdRequest(c.Server, ref, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProviderById(ctx context.Context, ref string, providerId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProviderByIdRequest(c.Server, ref, providerId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProviderByIdWithBody(ctx context.Context, ref string, providerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProviderByIdRequestWithBody(c.Server, ref, providerId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateProviderById(ctx context.Context, ref string, providerId string, body UpdateProviderByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateProviderByIdRequest(c.Server, ref, providerId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1GetPgbouncerConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1GetPgbouncerConfigRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConfigRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConfigRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConfig(ctx context.Context, ref string, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConfigRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveCustomHostnameConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveCustomHostnameConfigRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCustomHostnameConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCustomHostnameConfigRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Activate(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomHostnameConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomHostnameConfigRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCustomHostnameConfig(ctx context.Context, ref string, body CreateCustomHostnameConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCustomHostnameConfigRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Reverify(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewReverifyRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1RestorePitrWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1RestorePitrRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1RestorePitr(ctx context.Context, ref string, body V1RestorePitrJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1RestorePitrRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1RunQueryWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1RunQueryRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1RunQuery(ctx context.Context, ref string, body V1RunQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1RunQueryRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) V1EnableDatabaseWebhooks(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewV1EnableDatabaseWebhooksRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctions(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionsRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunctionWithBody(ctx context.Context, ref string, params *CreateFunctionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionRequestWithBody(c.Server, ref, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateFunction(ctx context.Context, ref string, params *CreateFunctionParams, body CreateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateFunctionRequest(c.Server, ref, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteFunction(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteFunctionRequest(c.Server, ref, functionSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunction(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionRequest(c.Server, ref, functionSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunctionWithBody(ctx context.Context, ref string, functionSlug string, params *UpdateFunctionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionRequestWithBody(c.Server, ref, functionSlug, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateFunction(ctx context.Context, ref string, functionSlug string, params *UpdateFunctionParams, body UpdateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateFunctionRequest(c.Server, ref, functionSlug, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFunctionBody(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFunctionBodyRequest(c.Server, ref, functionSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckServiceHealth(ctx context.Context, ref string, params *CheckServiceHealthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckServiceHealthRequest(c.Server, ref, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveNetworkBanWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveNetworkBanRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveNetworkBan(ctx context.Context, ref string, body RemoveNetworkBanJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveNetworkBanRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetworkBans(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetworkBansRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNetworkRestrictions(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNetworkRestrictionsRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyNetworkRestrictionsWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyNetworkRestrictionsRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ApplyNetworkRestrictions(ctx context.Context, ref string, body ApplyNetworkRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewApplyNetworkRestrictionsRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPgsodiumConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPgsodiumConfigRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePgsodiumConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePgsodiumConfigRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePgsodiumConfig(ctx context.Context, ref string, body UpdatePgsodiumConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePgsodiumConfigRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPostgRESTConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPostgRESTConfigRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostgRESTConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostgRESTConfigRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePostgRESTConfig(ctx context.Context, ref string, body UpdatePostgRESTConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePostgRESTConfigRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetReadOnlyModeStatus(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetReadOnlyModeStatusRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TemporarilyDisableReadonlyMode(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTemporarilyDisableReadonlyModeRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecretsWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretsRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSecrets(ctx context.Context, ref string, body DeleteSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSecretsRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSecrets(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSecretsRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecretsWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecretsRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSecrets(ctx context.Context, ref string, body CreateSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSecretsRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSslEnforcementConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSslEnforcementConfigRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSslEnforcementConfigWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSslEnforcementConfigRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSslEnforcementConfig(ctx context.Context, ref string, body UpdateSslEnforcementConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSslEnforcementConfigRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTypescriptTypes(ctx context.Context, ref string, params *GetTypescriptTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTypescriptTypesRequest(c.Server, ref, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpgradeProjectWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpgradeProjectRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpgradeProject(ctx context.Context, ref string, body UpgradeProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpgradeProjectRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpgradeEligibilityInformation(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpgradeEligibilityInformationRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUpgradeStatus(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUpgradeStatusRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveVanitySubdomainConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveVanitySubdomainConfigRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVanitySubdomainConfig(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVanitySubdomainConfigRequest(c.Server, ref)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateVanitySubdomainPleaseWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateVanitySubdomainPleaseRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ActivateVanitySubdomainPlease(ctx context.Context, ref string, body ActivateVanitySubdomainPleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewActivateVanitySubdomainPleaseRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckVanitySubdomainAvailabilityWithBody(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckVanitySubdomainAvailabilityRequestWithBody(c.Server, ref, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CheckVanitySubdomainAvailability(ctx context.Context, ref string, body CheckVanitySubdomainAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCheckVanitySubdomainAvailabilityRequest(c.Server, ref, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSnippets(ctx context.Context, params *ListSnippetsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSnippetsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSnippet(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSnippetRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteBranchRequest generates requests for DeleteBranch
func NewDeleteBranchRequest(server string, branchId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "branch_id", runtime.ParamLocationPath, branchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/branches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBranchDetailsRequest generates requests for GetBranchDetails
func NewGetBranchDetailsRequest(server string, branchId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "branch_id", runtime.ParamLocationPath, branchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/branches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateBranchRequest calls the generic UpdateBranch builder with application/json body
func NewUpdateBranchRequest(server string, branchId string, body UpdateBranchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateBranchRequestWithBody(server, branchId, "application/json", bodyReader)
}

// NewUpdateBranchRequestWithBody generates requests for UpdateBranch with any type of body
func NewUpdateBranchRequestWithBody(server string, branchId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "branch_id", runtime.ParamLocationPath, branchId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/branches/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewAuthorizeRequest generates requests for Authorize
func NewAuthorizeRequest(server string, params *AuthorizeParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/oauth/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "client_id", runtime.ParamLocationQuery, params.ClientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "response_type", runtime.ParamLocationQuery, params.ResponseType); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "redirect_uri", runtime.ParamLocationQuery, params.RedirectUri); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Scope != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "scope", runtime.ParamLocationQuery, *params.Scope); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.State != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "state", runtime.ParamLocationQuery, *params.State); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResponseMode != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "response_mode", runtime.ParamLocationQuery, *params.ResponseMode); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CodeChallenge != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code_challenge", runtime.ParamLocationQuery, *params.CodeChallenge); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CodeChallengeMethod != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "code_challenge_method", runtime.ParamLocationQuery, *params.CodeChallengeMethod); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTokenRequestWithFormdataBody calls the generic Token builder with application/x-www-form-urlencoded body
func NewTokenRequestWithFormdataBody(server string, body TokenFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewTokenRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewTokenRequestWithBody generates requests for Token with any type of body
func NewTokenRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/oauth/token")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsRequest generates requests for GetOrganizations
func NewGetOrganizationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateOrganizationRequest calls the generic CreateOrganization builder with application/json body
func NewCreateOrganizationRequest(server string, body CreateOrganizationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateOrganizationRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateOrganizationRequestWithBody generates requests for CreateOrganization with any type of body
func NewCreateOrganizationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1ListOrganizationMembersRequest generates requests for V1ListOrganizationMembers
func NewV1ListOrganizationMembersRequest(server string, slug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "slug", runtime.ParamLocationPath, slug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/organizations/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectsRequest generates requests for GetProjects
func NewGetProjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProjectRequest calls the generic CreateProject builder with application/json body
func NewCreateProjectRequest(server string, body CreateProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProjectRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateProjectRequestWithBody generates requests for CreateProject with any type of body
func NewCreateProjectRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteProjectRequest generates requests for DeleteProject
func NewDeleteProjectRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProjectApiKeysRequest generates requests for GetProjectApiKeys
func NewGetProjectApiKeysRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/api-keys", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDisableBranchRequest generates requests for DisableBranch
func NewDisableBranchRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/branches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBranchesRequest generates requests for GetBranches
func NewGetBranchesRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/branches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateBranchRequest calls the generic CreateBranch builder with application/json body
func NewCreateBranchRequest(server string, ref string, body CreateBranchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateBranchRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewCreateBranchRequestWithBody generates requests for CreateBranch with any type of body
func NewCreateBranchRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/branches", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetV1AuthConfigRequest generates requests for GetV1AuthConfig
func NewGetV1AuthConfigRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/config/auth", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateV1AuthConfigRequest calls the generic UpdateV1AuthConfig builder with application/json body
func NewUpdateV1AuthConfigRequest(server string, ref string, body UpdateV1AuthConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateV1AuthConfigRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewUpdateV1AuthConfigRequestWithBody generates requests for UpdateV1AuthConfig with any type of body
func NewUpdateV1AuthConfigRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/config/auth", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAllProvidersRequest generates requests for ListAllProviders
func NewListAllProvidersRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/config/auth/sso/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateProviderForProjectRequest calls the generic CreateProviderForProject builder with application/json body
func NewCreateProviderForProjectRequest(server string, ref string, body CreateProviderForProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateProviderForProjectRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewCreateProviderForProjectRequestWithBody generates requests for CreateProviderForProject with any type of body
func NewCreateProviderForProjectRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/config/auth/sso/providers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveProviderByIdRequest generates requests for RemoveProviderById
func NewRemoveProviderByIdRequest(server string, ref string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "provider_id", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/config/auth/sso/providers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProviderByIdRequest generates requests for GetProviderById
func NewGetProviderByIdRequest(server string, ref string, providerId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "provider_id", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/config/auth/sso/providers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateProviderByIdRequest calls the generic UpdateProviderById builder with application/json body
func NewUpdateProviderByIdRequest(server string, ref string, providerId string, body UpdateProviderByIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateProviderByIdRequestWithBody(server, ref, providerId, "application/json", bodyReader)
}

// NewUpdateProviderByIdRequestWithBody generates requests for UpdateProviderById with any type of body
func NewUpdateProviderByIdRequestWithBody(server string, ref string, providerId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "provider_id", runtime.ParamLocationPath, providerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/config/auth/sso/providers/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1GetPgbouncerConfigRequest generates requests for V1GetPgbouncerConfig
func NewV1GetPgbouncerConfigRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/config/database/pgbouncer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConfigRequest generates requests for GetConfig
func NewGetConfigRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/config/database/postgres", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConfigRequest calls the generic UpdateConfig builder with application/json body
func NewUpdateConfigRequest(server string, ref string, body UpdateConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateConfigRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewUpdateConfigRequestWithBody generates requests for UpdateConfig with any type of body
func NewUpdateConfigRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/config/database/postgres", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveCustomHostnameConfigRequest generates requests for RemoveCustomHostnameConfig
func NewRemoveCustomHostnameConfigRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/custom-hostname", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetCustomHostnameConfigRequest generates requests for GetCustomHostnameConfig
func NewGetCustomHostnameConfigRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/custom-hostname", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActivateRequest generates requests for Activate
func NewActivateRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/custom-hostname/activate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCustomHostnameConfigRequest calls the generic CreateCustomHostnameConfig builder with application/json body
func NewCreateCustomHostnameConfigRequest(server string, ref string, body CreateCustomHostnameConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateCustomHostnameConfigRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewCreateCustomHostnameConfigRequestWithBody generates requests for CreateCustomHostnameConfig with any type of body
func NewCreateCustomHostnameConfigRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/custom-hostname/initialize", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewReverifyRequest generates requests for Reverify
func NewReverifyRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/custom-hostname/reverify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewV1RestorePitrRequest calls the generic V1RestorePitr builder with application/json body
func NewV1RestorePitrRequest(server string, ref string, body V1RestorePitrJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1RestorePitrRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewV1RestorePitrRequestWithBody generates requests for V1RestorePitr with any type of body
func NewV1RestorePitrRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/backups/restore-pitr", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1RunQueryRequest calls the generic V1RunQuery builder with application/json body
func NewV1RunQueryRequest(server string, ref string, body V1RunQueryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewV1RunQueryRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewV1RunQueryRequestWithBody generates requests for V1RunQuery with any type of body
func NewV1RunQueryRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/query", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewV1EnableDatabaseWebhooksRequest generates requests for V1EnableDatabaseWebhooks
func NewV1EnableDatabaseWebhooksRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/database/webhooks/enable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionsRequest generates requests for GetFunctions
func NewGetFunctionsRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/functions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateFunctionRequest calls the generic CreateFunction builder with application/json body
func NewCreateFunctionRequest(server string, ref string, params *CreateFunctionParams, body CreateFunctionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateFunctionRequestWithBody(server, ref, params, "application/json", bodyReader)
}

// NewCreateFunctionRequestWithBody generates requests for CreateFunction with any type of body
func NewCreateFunctionRequestWithBody(server string, ref string, params *CreateFunctionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/functions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Slug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "slug", runtime.ParamLocationQuery, *params.Slug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerifyJwt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verify_jwt", runtime.ParamLocationQuery, *params.VerifyJwt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportMap != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_map", runtime.ParamLocationQuery, *params.ImportMap); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EntrypointPath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entrypoint_path", runtime.ParamLocationQuery, *params.EntrypointPath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportMapPath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_map_path", runtime.ParamLocationQuery, *params.ImportMapPath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteFunctionRequest generates requests for DeleteFunction
func NewDeleteFunctionRequest(server string, ref string, functionSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "function_slug", runtime.ParamLocationPath, functionSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/functions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFunctionRequest generates requests for GetFunction
func NewGetFunctionRequest(server string, ref string, functionSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "function_slug", runtime.ParamLocationPath, functionSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/functions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateFunctionRequest calls the generic UpdateFunction builder with application/json body
func NewUpdateFunctionRequest(server string, ref string, functionSlug string, params *UpdateFunctionParams, body UpdateFunctionJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateFunctionRequestWithBody(server, ref, functionSlug, params, "application/json", bodyReader)
}

// NewUpdateFunctionRequestWithBody generates requests for UpdateFunction with any type of body
func NewUpdateFunctionRequestWithBody(server string, ref string, functionSlug string, params *UpdateFunctionParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "function_slug", runtime.ParamLocationPath, functionSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/functions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Slug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "slug", runtime.ParamLocationQuery, *params.Slug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Name != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "name", runtime.ParamLocationQuery, *params.Name); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.VerifyJwt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "verify_jwt", runtime.ParamLocationQuery, *params.VerifyJwt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportMap != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_map", runtime.ParamLocationQuery, *params.ImportMap); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.EntrypointPath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "entrypoint_path", runtime.ParamLocationQuery, *params.EntrypointPath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ImportMapPath != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "import_map_path", runtime.ParamLocationQuery, *params.ImportMapPath); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetFunctionBodyRequest generates requests for GetFunctionBody
func NewGetFunctionBodyRequest(server string, ref string, functionSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "function_slug", runtime.ParamLocationPath, functionSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/functions/%s/body", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCheckServiceHealthRequest generates requests for CheckServiceHealth
func NewCheckServiceHealthRequest(server string, ref string, params *CheckServiceHealthParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/health", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.TimeoutMs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "timeout_ms", runtime.ParamLocationQuery, *params.TimeoutMs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "services", runtime.ParamLocationQuery, params.Services); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveNetworkBanRequest calls the generic RemoveNetworkBan builder with application/json body
func NewRemoveNetworkBanRequest(server string, ref string, body RemoveNetworkBanJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRemoveNetworkBanRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewRemoveNetworkBanRequestWithBody generates requests for RemoveNetworkBan with any type of body
func NewRemoveNetworkBanRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/network-bans", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNetworkBansRequest generates requests for GetNetworkBans
func NewGetNetworkBansRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/network-bans/retrieve", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNetworkRestrictionsRequest generates requests for GetNetworkRestrictions
func NewGetNetworkRestrictionsRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/network-restrictions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewApplyNetworkRestrictionsRequest calls the generic ApplyNetworkRestrictions builder with application/json body
func NewApplyNetworkRestrictionsRequest(server string, ref string, body ApplyNetworkRestrictionsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewApplyNetworkRestrictionsRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewApplyNetworkRestrictionsRequestWithBody generates requests for ApplyNetworkRestrictions with any type of body
func NewApplyNetworkRestrictionsRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/network-restrictions/apply", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPgsodiumConfigRequest generates requests for GetPgsodiumConfig
func NewGetPgsodiumConfigRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/pgsodium", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePgsodiumConfigRequest calls the generic UpdatePgsodiumConfig builder with application/json body
func NewUpdatePgsodiumConfigRequest(server string, ref string, body UpdatePgsodiumConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePgsodiumConfigRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewUpdatePgsodiumConfigRequestWithBody generates requests for UpdatePgsodiumConfig with any type of body
func NewUpdatePgsodiumConfigRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/pgsodium", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPostgRESTConfigRequest generates requests for GetPostgRESTConfig
func NewGetPostgRESTConfigRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/postgrest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdatePostgRESTConfigRequest calls the generic UpdatePostgRESTConfig builder with application/json body
func NewUpdatePostgRESTConfigRequest(server string, ref string, body UpdatePostgRESTConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdatePostgRESTConfigRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewUpdatePostgRESTConfigRequestWithBody generates requests for UpdatePostgRESTConfig with any type of body
func NewUpdatePostgRESTConfigRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/postgrest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetReadOnlyModeStatusRequest generates requests for GetReadOnlyModeStatus
func NewGetReadOnlyModeStatusRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/readonly", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTemporarilyDisableReadonlyModeRequest generates requests for TemporarilyDisableReadonlyMode
func NewTemporarilyDisableReadonlyModeRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/readonly/temporary-disable", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSecretsRequest calls the generic DeleteSecrets builder with application/json body
func NewDeleteSecretsRequest(server string, ref string, body DeleteSecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteSecretsRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewDeleteSecretsRequestWithBody generates requests for DeleteSecrets with any type of body
func NewDeleteSecretsRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSecretsRequest generates requests for GetSecrets
func NewGetSecretsRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSecretsRequest calls the generic CreateSecrets builder with application/json body
func NewCreateSecretsRequest(server string, ref string, body CreateSecretsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateSecretsRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewCreateSecretsRequestWithBody generates requests for CreateSecrets with any type of body
func NewCreateSecretsRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/secrets", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSslEnforcementConfigRequest generates requests for GetSslEnforcementConfig
func NewGetSslEnforcementConfigRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/ssl-enforcement", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSslEnforcementConfigRequest calls the generic UpdateSslEnforcementConfig builder with application/json body
func NewUpdateSslEnforcementConfigRequest(server string, ref string, body UpdateSslEnforcementConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateSslEnforcementConfigRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewUpdateSslEnforcementConfigRequestWithBody generates requests for UpdateSslEnforcementConfig with any type of body
func NewUpdateSslEnforcementConfigRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/ssl-enforcement", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTypescriptTypesRequest generates requests for GetTypescriptTypes
func NewGetTypescriptTypesRequest(server string, ref string, params *GetTypescriptTypesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/types/typescript", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.IncludedSchemas != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "included_schemas", runtime.ParamLocationQuery, *params.IncludedSchemas); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpgradeProjectRequest calls the generic UpgradeProject builder with application/json body
func NewUpgradeProjectRequest(server string, ref string, body UpgradeProjectJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpgradeProjectRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewUpgradeProjectRequestWithBody generates requests for UpgradeProject with any type of body
func NewUpgradeProjectRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/upgrade", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpgradeEligibilityInformationRequest generates requests for UpgradeEligibilityInformation
func NewUpgradeEligibilityInformationRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/upgrade/eligibility", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUpgradeStatusRequest generates requests for GetUpgradeStatus
func NewGetUpgradeStatusRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/upgrade/status", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRemoveVanitySubdomainConfigRequest generates requests for RemoveVanitySubdomainConfig
func NewRemoveVanitySubdomainConfigRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/vanity-subdomain", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetVanitySubdomainConfigRequest generates requests for GetVanitySubdomainConfig
func NewGetVanitySubdomainConfigRequest(server string, ref string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/vanity-subdomain", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewActivateVanitySubdomainPleaseRequest calls the generic ActivateVanitySubdomainPlease builder with application/json body
func NewActivateVanitySubdomainPleaseRequest(server string, ref string, body ActivateVanitySubdomainPleaseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewActivateVanitySubdomainPleaseRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewActivateVanitySubdomainPleaseRequestWithBody generates requests for ActivateVanitySubdomainPlease with any type of body
func NewActivateVanitySubdomainPleaseRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/vanity-subdomain/activate", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCheckVanitySubdomainAvailabilityRequest calls the generic CheckVanitySubdomainAvailability builder with application/json body
func NewCheckVanitySubdomainAvailabilityRequest(server string, ref string, body CheckVanitySubdomainAvailabilityJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCheckVanitySubdomainAvailabilityRequestWithBody(server, ref, "application/json", bodyReader)
}

// NewCheckVanitySubdomainAvailabilityRequestWithBody generates requests for CheckVanitySubdomainAvailability with any type of body
func NewCheckVanitySubdomainAvailabilityRequestWithBody(server string, ref string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ref", runtime.ParamLocationPath, ref)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/projects/%s/vanity-subdomain/check-availability", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSnippetsRequest generates requests for ListSnippets
func NewListSnippetsRequest(server string, params *ListSnippetsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/snippets")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ProjectRef != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "project_ref", runtime.ParamLocationQuery, *params.ProjectRef); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSnippetRequest generates requests for GetSnippet
func NewGetSnippetRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/v1/snippets/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteBranchWithResponse request
	DeleteBranchWithResponse(ctx context.Context, branchId string, reqEditors ...RequestEditorFn) (*DeleteBranchResponse, error)

	// GetBranchDetailsWithResponse request
	GetBranchDetailsWithResponse(ctx context.Context, branchId string, reqEditors ...RequestEditorFn) (*GetBranchDetailsResponse, error)

	// UpdateBranchWithBodyWithResponse request with any body
	UpdateBranchWithBodyWithResponse(ctx context.Context, branchId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBranchResponse, error)

	UpdateBranchWithResponse(ctx context.Context, branchId string, body UpdateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBranchResponse, error)

	// AuthorizeWithResponse request
	AuthorizeWithResponse(ctx context.Context, params *AuthorizeParams, reqEditors ...RequestEditorFn) (*AuthorizeResponse, error)

	// TokenWithBodyWithResponse request with any body
	TokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenResponse, error)

	TokenWithFormdataBodyWithResponse(ctx context.Context, body TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenResponse, error)

	// GetOrganizationsWithResponse request
	GetOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error)

	// CreateOrganizationWithBodyWithResponse request with any body
	CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error)

	// V1ListOrganizationMembersWithResponse request
	V1ListOrganizationMembersWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*V1ListOrganizationMembersResponse, error)

	// GetProjectsWithResponse request
	GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error)

	// CreateProjectWithBodyWithResponse request with any body
	CreateProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	CreateProjectWithResponse(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error)

	// DeleteProjectWithResponse request
	DeleteProjectWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error)

	// GetProjectApiKeysWithResponse request
	GetProjectApiKeysWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetProjectApiKeysResponse, error)

	// DisableBranchWithResponse request
	DisableBranchWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*DisableBranchResponse, error)

	// GetBranchesWithResponse request
	GetBranchesWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetBranchesResponse, error)

	// CreateBranchWithBodyWithResponse request with any body
	CreateBranchWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error)

	CreateBranchWithResponse(ctx context.Context, ref string, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error)

	// GetV1AuthConfigWithResponse request
	GetV1AuthConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetV1AuthConfigResponse, error)

	// UpdateV1AuthConfigWithBodyWithResponse request with any body
	UpdateV1AuthConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateV1AuthConfigResponse, error)

	UpdateV1AuthConfigWithResponse(ctx context.Context, ref string, body UpdateV1AuthConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateV1AuthConfigResponse, error)

	// ListAllProvidersWithResponse request
	ListAllProvidersWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*ListAllProvidersResponse, error)

	// CreateProviderForProjectWithBodyWithResponse request with any body
	CreateProviderForProjectWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProviderForProjectResponse, error)

	CreateProviderForProjectWithResponse(ctx context.Context, ref string, body CreateProviderForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProviderForProjectResponse, error)

	// RemoveProviderByIdWithResponse request
	RemoveProviderByIdWithResponse(ctx context.Context, ref string, providerId string, reqEditors ...RequestEditorFn) (*RemoveProviderByIdResponse, error)

	// GetProviderByIdWithResponse request
	GetProviderByIdWithResponse(ctx context.Context, ref string, providerId string, reqEditors ...RequestEditorFn) (*GetProviderByIdResponse, error)

	// UpdateProviderByIdWithBodyWithResponse request with any body
	UpdateProviderByIdWithBodyWithResponse(ctx context.Context, ref string, providerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProviderByIdResponse, error)

	UpdateProviderByIdWithResponse(ctx context.Context, ref string, providerId string, body UpdateProviderByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProviderByIdResponse, error)

	// V1GetPgbouncerConfigWithResponse request
	V1GetPgbouncerConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*V1GetPgbouncerConfigResponse, error)

	// GetConfigWithResponse request
	GetConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetConfigResponse, error)

	// UpdateConfigWithBodyWithResponse request with any body
	UpdateConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error)

	UpdateConfigWithResponse(ctx context.Context, ref string, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error)

	// RemoveCustomHostnameConfigWithResponse request
	RemoveCustomHostnameConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*RemoveCustomHostnameConfigResponse, error)

	// GetCustomHostnameConfigWithResponse request
	GetCustomHostnameConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetCustomHostnameConfigResponse, error)

	// ActivateWithResponse request
	ActivateWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*ActivateResponse, error)

	// CreateCustomHostnameConfigWithBodyWithResponse request with any body
	CreateCustomHostnameConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomHostnameConfigResponse, error)

	CreateCustomHostnameConfigWithResponse(ctx context.Context, ref string, body CreateCustomHostnameConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomHostnameConfigResponse, error)

	// ReverifyWithResponse request
	ReverifyWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*ReverifyResponse, error)

	// V1RestorePitrWithBodyWithResponse request with any body
	V1RestorePitrWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1RestorePitrResponse, error)

	V1RestorePitrWithResponse(ctx context.Context, ref string, body V1RestorePitrJSONRequestBody, reqEditors ...RequestEditorFn) (*V1RestorePitrResponse, error)

	// V1RunQueryWithBodyWithResponse request with any body
	V1RunQueryWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1RunQueryResponse, error)

	V1RunQueryWithResponse(ctx context.Context, ref string, body V1RunQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*V1RunQueryResponse, error)

	// V1EnableDatabaseWebhooksWithResponse request
	V1EnableDatabaseWebhooksWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*V1EnableDatabaseWebhooksResponse, error)

	// GetFunctionsWithResponse request
	GetFunctionsWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetFunctionsResponse, error)

	// CreateFunctionWithBodyWithResponse request with any body
	CreateFunctionWithBodyWithResponse(ctx context.Context, ref string, params *CreateFunctionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionResponse, error)

	CreateFunctionWithResponse(ctx context.Context, ref string, params *CreateFunctionParams, body CreateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFunctionResponse, error)

	// DeleteFunctionWithResponse request
	DeleteFunctionWithResponse(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*DeleteFunctionResponse, error)

	// GetFunctionWithResponse request
	GetFunctionWithResponse(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*GetFunctionResponse, error)

	// UpdateFunctionWithBodyWithResponse request with any body
	UpdateFunctionWithBodyWithResponse(ctx context.Context, ref string, functionSlug string, params *UpdateFunctionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionResponse, error)

	UpdateFunctionWithResponse(ctx context.Context, ref string, functionSlug string, params *UpdateFunctionParams, body UpdateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFunctionResponse, error)

	// GetFunctionBodyWithResponse request
	GetFunctionBodyWithResponse(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*GetFunctionBodyResponse, error)

	// CheckServiceHealthWithResponse request
	CheckServiceHealthWithResponse(ctx context.Context, ref string, params *CheckServiceHealthParams, reqEditors ...RequestEditorFn) (*CheckServiceHealthResponse, error)

	// RemoveNetworkBanWithBodyWithResponse request with any body
	RemoveNetworkBanWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveNetworkBanResponse, error)

	RemoveNetworkBanWithResponse(ctx context.Context, ref string, body RemoveNetworkBanJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveNetworkBanResponse, error)

	// GetNetworkBansWithResponse request
	GetNetworkBansWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetNetworkBansResponse, error)

	// GetNetworkRestrictionsWithResponse request
	GetNetworkRestrictionsWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetNetworkRestrictionsResponse, error)

	// ApplyNetworkRestrictionsWithBodyWithResponse request with any body
	ApplyNetworkRestrictionsWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyNetworkRestrictionsResponse, error)

	ApplyNetworkRestrictionsWithResponse(ctx context.Context, ref string, body ApplyNetworkRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyNetworkRestrictionsResponse, error)

	// GetPgsodiumConfigWithResponse request
	GetPgsodiumConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetPgsodiumConfigResponse, error)

	// UpdatePgsodiumConfigWithBodyWithResponse request with any body
	UpdatePgsodiumConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePgsodiumConfigResponse, error)

	UpdatePgsodiumConfigWithResponse(ctx context.Context, ref string, body UpdatePgsodiumConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePgsodiumConfigResponse, error)

	// GetPostgRESTConfigWithResponse request
	GetPostgRESTConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetPostgRESTConfigResponse, error)

	// UpdatePostgRESTConfigWithBodyWithResponse request with any body
	UpdatePostgRESTConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostgRESTConfigResponse, error)

	UpdatePostgRESTConfigWithResponse(ctx context.Context, ref string, body UpdatePostgRESTConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePostgRESTConfigResponse, error)

	// GetReadOnlyModeStatusWithResponse request
	GetReadOnlyModeStatusWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetReadOnlyModeStatusResponse, error)

	// TemporarilyDisableReadonlyModeWithResponse request
	TemporarilyDisableReadonlyModeWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*TemporarilyDisableReadonlyModeResponse, error)

	// DeleteSecretsWithBodyWithResponse request with any body
	DeleteSecretsWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSecretsResponse, error)

	DeleteSecretsWithResponse(ctx context.Context, ref string, body DeleteSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSecretsResponse, error)

	// GetSecretsWithResponse request
	GetSecretsWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetSecretsResponse, error)

	// CreateSecretsWithBodyWithResponse request with any body
	CreateSecretsWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecretsResponse, error)

	CreateSecretsWithResponse(ctx context.Context, ref string, body CreateSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecretsResponse, error)

	// GetSslEnforcementConfigWithResponse request
	GetSslEnforcementConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetSslEnforcementConfigResponse, error)

	// UpdateSslEnforcementConfigWithBodyWithResponse request with any body
	UpdateSslEnforcementConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSslEnforcementConfigResponse, error)

	UpdateSslEnforcementConfigWithResponse(ctx context.Context, ref string, body UpdateSslEnforcementConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSslEnforcementConfigResponse, error)

	// GetTypescriptTypesWithResponse request
	GetTypescriptTypesWithResponse(ctx context.Context, ref string, params *GetTypescriptTypesParams, reqEditors ...RequestEditorFn) (*GetTypescriptTypesResponse, error)

	// UpgradeProjectWithBodyWithResponse request with any body
	UpgradeProjectWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpgradeProjectResponse, error)

	UpgradeProjectWithResponse(ctx context.Context, ref string, body UpgradeProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpgradeProjectResponse, error)

	// UpgradeEligibilityInformationWithResponse request
	UpgradeEligibilityInformationWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*UpgradeEligibilityInformationResponse, error)

	// GetUpgradeStatusWithResponse request
	GetUpgradeStatusWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetUpgradeStatusResponse, error)

	// RemoveVanitySubdomainConfigWithResponse request
	RemoveVanitySubdomainConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*RemoveVanitySubdomainConfigResponse, error)

	// GetVanitySubdomainConfigWithResponse request
	GetVanitySubdomainConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetVanitySubdomainConfigResponse, error)

	// ActivateVanitySubdomainPleaseWithBodyWithResponse request with any body
	ActivateVanitySubdomainPleaseWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateVanitySubdomainPleaseResponse, error)

	ActivateVanitySubdomainPleaseWithResponse(ctx context.Context, ref string, body ActivateVanitySubdomainPleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateVanitySubdomainPleaseResponse, error)

	// CheckVanitySubdomainAvailabilityWithBodyWithResponse request with any body
	CheckVanitySubdomainAvailabilityWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckVanitySubdomainAvailabilityResponse, error)

	CheckVanitySubdomainAvailabilityWithResponse(ctx context.Context, ref string, body CheckVanitySubdomainAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckVanitySubdomainAvailabilityResponse, error)

	// ListSnippetsWithResponse request
	ListSnippetsWithResponse(ctx context.Context, params *ListSnippetsParams, reqEditors ...RequestEditorFn) (*ListSnippetsResponse, error)

	// GetSnippetWithResponse request
	GetSnippetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSnippetResponse, error)
}

type DeleteBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBranchDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BranchDetailResponse
}

// Status returns HTTPResponse.Status
func (r GetBranchDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBranchDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BranchResponse
}

// Status returns HTTPResponse.Status
func (r UpdateBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OAuthTokenResponse
}

// Status returns HTTPResponse.Status
func (r TokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OrganizationResponse
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateOrganizationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *OrganizationResponse
}

// Status returns HTTPResponse.Status
func (r CreateOrganizationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateOrganizationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1ListOrganizationMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]V1OrganizationMemberResponse
}

// Status returns HTTPResponse.Status
func (r V1ListOrganizationMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1ListOrganizationMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ProjectResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectResponse
	JSON201      *ProjectResponse
}

// Status returns HTTPResponse.Status
func (r CreateProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectRefResponse
}

// Status returns HTTPResponse.Status
func (r DeleteProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProjectApiKeysResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApiKeyResponse
}

// Status returns HTTPResponse.Status
func (r GetProjectApiKeysResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProjectApiKeysResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DisableBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBranchesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]BranchResponse
}

// Status returns HTTPResponse.Status
func (r GetBranchesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBranchesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateBranchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *BranchResponse
}

// Status returns HTTPResponse.Status
func (r CreateBranchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateBranchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetV1AuthConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthConfigResponse
}

// Status returns HTTPResponse.Status
func (r GetV1AuthConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetV1AuthConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateV1AuthConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthConfigResponse
}

// Status returns HTTPResponse.Status
func (r UpdateV1AuthConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateV1AuthConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAllProvidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ListProvidersResponse
}

// Status returns HTTPResponse.Status
func (r ListAllProvidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAllProvidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateProviderForProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *CreateProviderResponse
}

// Status returns HTTPResponse.Status
func (r CreateProviderForProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateProviderForProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveProviderByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DeleteProviderResponse
}

// Status returns HTTPResponse.Status
func (r RemoveProviderByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveProviderByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProviderByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProviderResponse
}

// Status returns HTTPResponse.Status
func (r GetProviderByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProviderByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateProviderByIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateProviderResponse
}

// Status returns HTTPResponse.Status
func (r UpdateProviderByIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateProviderByIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1GetPgbouncerConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *V1PgbouncerConfigResponse
}

// Status returns HTTPResponse.Status
func (r V1GetPgbouncerConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1GetPgbouncerConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostgresConfigResponse
}

// Status returns HTTPResponse.Status
func (r GetConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostgresConfigResponse
}

// Status returns HTTPResponse.Status
func (r UpdateConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveCustomHostnameConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveCustomHostnameConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveCustomHostnameConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCustomHostnameConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UpdateCustomHostnameResponse
}

// Status returns HTTPResponse.Status
func (r GetCustomHostnameConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCustomHostnameConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UpdateCustomHostnameResponse
}

// Status returns HTTPResponse.Status
func (r ActivateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCustomHostnameConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UpdateCustomHostnameResponse
}

// Status returns HTTPResponse.Status
func (r CreateCustomHostnameConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCustomHostnameConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ReverifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *UpdateCustomHostnameResponse
}

// Status returns HTTPResponse.Status
func (r ReverifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ReverifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1RestorePitrResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1RestorePitrResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1RestorePitrResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1RunQueryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r V1RunQueryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1RunQueryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type V1EnableDatabaseWebhooksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r V1EnableDatabaseWebhooksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r V1EnableDatabaseWebhooksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]FunctionResponse
}

// Status returns HTTPResponse.Status
func (r GetFunctionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *FunctionResponse
}

// Status returns HTTPResponse.Status
func (r CreateFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FunctionSlugResponse
}

// Status returns HTTPResponse.Status
func (r GetFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateFunctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FunctionResponse
}

// Status returns HTTPResponse.Status
func (r UpdateFunctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateFunctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFunctionBodyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetFunctionBodyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFunctionBodyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckServiceHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ServiceHealthResponse
}

// Status returns HTTPResponse.Status
func (r CheckServiceHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckServiceHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveNetworkBanResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveNetworkBanResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveNetworkBanResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetworkBansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NetworkBanResponse
}

// Status returns HTTPResponse.Status
func (r GetNetworkBansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworkBansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNetworkRestrictionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NetworkRestrictionsResponse
}

// Status returns HTTPResponse.Status
func (r GetNetworkRestrictionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNetworkRestrictionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ApplyNetworkRestrictionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *NetworkRestrictionsResponse
}

// Status returns HTTPResponse.Status
func (r ApplyNetworkRestrictionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ApplyNetworkRestrictionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPgsodiumConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PgsodiumConfigResponse
}

// Status returns HTTPResponse.Status
func (r GetPgsodiumConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPgsodiumConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePgsodiumConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PgsodiumConfigResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePgsodiumConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePgsodiumConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPostgRESTConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostgrestConfigWithJWTSecretResponse
}

// Status returns HTTPResponse.Status
func (r GetPostgRESTConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPostgRESTConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePostgRESTConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostgrestConfigResponse
}

// Status returns HTTPResponse.Status
func (r UpdatePostgRESTConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePostgRESTConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetReadOnlyModeStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReadOnlyStatusResponse
}

// Status returns HTTPResponse.Status
func (r GetReadOnlyModeStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetReadOnlyModeStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TemporarilyDisableReadonlyModeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r TemporarilyDisableReadonlyModeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TemporarilyDisableReadonlyModeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r DeleteSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SecretResponse
}

// Status returns HTTPResponse.Status
func (r GetSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSecretsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r CreateSecretsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSecretsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSslEnforcementConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslEnforcementResponse
}

// Status returns HTTPResponse.Status
func (r GetSslEnforcementConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSslEnforcementConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSslEnforcementConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SslEnforcementResponse
}

// Status returns HTTPResponse.Status
func (r UpdateSslEnforcementConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSslEnforcementConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTypescriptTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TypescriptResponse
}

// Status returns HTTPResponse.Status
func (r GetTypescriptTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTypescriptTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpgradeProjectResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpgradeProjectResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpgradeProjectResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpgradeEligibilityInformationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProjectUpgradeEligibilityResponse
}

// Status returns HTTPResponse.Status
func (r UpgradeEligibilityInformationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpgradeEligibilityInformationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUpgradeStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DatabaseUpgradeStatusResponse
}

// Status returns HTTPResponse.Status
func (r GetUpgradeStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUpgradeStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveVanitySubdomainConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r RemoveVanitySubdomainConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveVanitySubdomainConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVanitySubdomainConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VanitySubdomainConfigResponse
}

// Status returns HTTPResponse.Status
func (r GetVanitySubdomainConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVanitySubdomainConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ActivateVanitySubdomainPleaseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ActivateVanitySubdomainResponse
}

// Status returns HTTPResponse.Status
func (r ActivateVanitySubdomainPleaseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ActivateVanitySubdomainPleaseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CheckVanitySubdomainAvailabilityResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *SubdomainAvailabilityResponse
}

// Status returns HTTPResponse.Status
func (r CheckVanitySubdomainAvailabilityResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CheckVanitySubdomainAvailabilityResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSnippetsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnippetList
}

// Status returns HTTPResponse.Status
func (r ListSnippetsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSnippetsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSnippetResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SnippetResponse
}

// Status returns HTTPResponse.Status
func (r GetSnippetResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSnippetResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteBranchWithResponse request returning *DeleteBranchResponse
func (c *ClientWithResponses) DeleteBranchWithResponse(ctx context.Context, branchId string, reqEditors ...RequestEditorFn) (*DeleteBranchResponse, error) {
	rsp, err := c.DeleteBranch(ctx, branchId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteBranchResponse(rsp)
}

// GetBranchDetailsWithResponse request returning *GetBranchDetailsResponse
func (c *ClientWithResponses) GetBranchDetailsWithResponse(ctx context.Context, branchId string, reqEditors ...RequestEditorFn) (*GetBranchDetailsResponse, error) {
	rsp, err := c.GetBranchDetails(ctx, branchId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchDetailsResponse(rsp)
}

// UpdateBranchWithBodyWithResponse request with arbitrary body returning *UpdateBranchResponse
func (c *ClientWithResponses) UpdateBranchWithBodyWithResponse(ctx context.Context, branchId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateBranchResponse, error) {
	rsp, err := c.UpdateBranchWithBody(ctx, branchId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBranchResponse(rsp)
}

func (c *ClientWithResponses) UpdateBranchWithResponse(ctx context.Context, branchId string, body UpdateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateBranchResponse, error) {
	rsp, err := c.UpdateBranch(ctx, branchId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateBranchResponse(rsp)
}

// AuthorizeWithResponse request returning *AuthorizeResponse
func (c *ClientWithResponses) AuthorizeWithResponse(ctx context.Context, params *AuthorizeParams, reqEditors ...RequestEditorFn) (*AuthorizeResponse, error) {
	rsp, err := c.Authorize(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAuthorizeResponse(rsp)
}

// TokenWithBodyWithResponse request with arbitrary body returning *TokenResponse
func (c *ClientWithResponses) TokenWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*TokenResponse, error) {
	rsp, err := c.TokenWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenResponse(rsp)
}

func (c *ClientWithResponses) TokenWithFormdataBodyWithResponse(ctx context.Context, body TokenFormdataRequestBody, reqEditors ...RequestEditorFn) (*TokenResponse, error) {
	rsp, err := c.TokenWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTokenResponse(rsp)
}

// GetOrganizationsWithResponse request returning *GetOrganizationsResponse
func (c *ClientWithResponses) GetOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationsResponse, error) {
	rsp, err := c.GetOrganizations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsResponse(rsp)
}

// CreateOrganizationWithBodyWithResponse request with arbitrary body returning *CreateOrganizationResponse
func (c *ClientWithResponses) CreateOrganizationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganizationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

func (c *ClientWithResponses) CreateOrganizationWithResponse(ctx context.Context, body CreateOrganizationJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateOrganizationResponse, error) {
	rsp, err := c.CreateOrganization(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateOrganizationResponse(rsp)
}

// V1ListOrganizationMembersWithResponse request returning *V1ListOrganizationMembersResponse
func (c *ClientWithResponses) V1ListOrganizationMembersWithResponse(ctx context.Context, slug string, reqEditors ...RequestEditorFn) (*V1ListOrganizationMembersResponse, error) {
	rsp, err := c.V1ListOrganizationMembers(ctx, slug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1ListOrganizationMembersResponse(rsp)
}

// GetProjectsWithResponse request returning *GetProjectsResponse
func (c *ClientWithResponses) GetProjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProjectsResponse, error) {
	rsp, err := c.GetProjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectsResponse(rsp)
}

// CreateProjectWithBodyWithResponse request with arbitrary body returning *CreateProjectResponse
func (c *ClientWithResponses) CreateProjectWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProjectWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

func (c *ClientWithResponses) CreateProjectWithResponse(ctx context.Context, body CreateProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProjectResponse, error) {
	rsp, err := c.CreateProject(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProjectResponse(rsp)
}

// DeleteProjectWithResponse request returning *DeleteProjectResponse
func (c *ClientWithResponses) DeleteProjectWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*DeleteProjectResponse, error) {
	rsp, err := c.DeleteProject(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteProjectResponse(rsp)
}

// GetProjectApiKeysWithResponse request returning *GetProjectApiKeysResponse
func (c *ClientWithResponses) GetProjectApiKeysWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetProjectApiKeysResponse, error) {
	rsp, err := c.GetProjectApiKeys(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProjectApiKeysResponse(rsp)
}

// DisableBranchWithResponse request returning *DisableBranchResponse
func (c *ClientWithResponses) DisableBranchWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*DisableBranchResponse, error) {
	rsp, err := c.DisableBranch(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableBranchResponse(rsp)
}

// GetBranchesWithResponse request returning *GetBranchesResponse
func (c *ClientWithResponses) GetBranchesWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetBranchesResponse, error) {
	rsp, err := c.GetBranches(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBranchesResponse(rsp)
}

// CreateBranchWithBodyWithResponse request with arbitrary body returning *CreateBranchResponse
func (c *ClientWithResponses) CreateBranchWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error) {
	rsp, err := c.CreateBranchWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBranchResponse(rsp)
}

func (c *ClientWithResponses) CreateBranchWithResponse(ctx context.Context, ref string, body CreateBranchJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateBranchResponse, error) {
	rsp, err := c.CreateBranch(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateBranchResponse(rsp)
}

// GetV1AuthConfigWithResponse request returning *GetV1AuthConfigResponse
func (c *ClientWithResponses) GetV1AuthConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetV1AuthConfigResponse, error) {
	rsp, err := c.GetV1AuthConfig(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetV1AuthConfigResponse(rsp)
}

// UpdateV1AuthConfigWithBodyWithResponse request with arbitrary body returning *UpdateV1AuthConfigResponse
func (c *ClientWithResponses) UpdateV1AuthConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateV1AuthConfigResponse, error) {
	rsp, err := c.UpdateV1AuthConfigWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateV1AuthConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateV1AuthConfigWithResponse(ctx context.Context, ref string, body UpdateV1AuthConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateV1AuthConfigResponse, error) {
	rsp, err := c.UpdateV1AuthConfig(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateV1AuthConfigResponse(rsp)
}

// ListAllProvidersWithResponse request returning *ListAllProvidersResponse
func (c *ClientWithResponses) ListAllProvidersWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*ListAllProvidersResponse, error) {
	rsp, err := c.ListAllProviders(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAllProvidersResponse(rsp)
}

// CreateProviderForProjectWithBodyWithResponse request with arbitrary body returning *CreateProviderForProjectResponse
func (c *ClientWithResponses) CreateProviderForProjectWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateProviderForProjectResponse, error) {
	rsp, err := c.CreateProviderForProjectWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProviderForProjectResponse(rsp)
}

func (c *ClientWithResponses) CreateProviderForProjectWithResponse(ctx context.Context, ref string, body CreateProviderForProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateProviderForProjectResponse, error) {
	rsp, err := c.CreateProviderForProject(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateProviderForProjectResponse(rsp)
}

// RemoveProviderByIdWithResponse request returning *RemoveProviderByIdResponse
func (c *ClientWithResponses) RemoveProviderByIdWithResponse(ctx context.Context, ref string, providerId string, reqEditors ...RequestEditorFn) (*RemoveProviderByIdResponse, error) {
	rsp, err := c.RemoveProviderById(ctx, ref, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveProviderByIdResponse(rsp)
}

// GetProviderByIdWithResponse request returning *GetProviderByIdResponse
func (c *ClientWithResponses) GetProviderByIdWithResponse(ctx context.Context, ref string, providerId string, reqEditors ...RequestEditorFn) (*GetProviderByIdResponse, error) {
	rsp, err := c.GetProviderById(ctx, ref, providerId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProviderByIdResponse(rsp)
}

// UpdateProviderByIdWithBodyWithResponse request with arbitrary body returning *UpdateProviderByIdResponse
func (c *ClientWithResponses) UpdateProviderByIdWithBodyWithResponse(ctx context.Context, ref string, providerId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateProviderByIdResponse, error) {
	rsp, err := c.UpdateProviderByIdWithBody(ctx, ref, providerId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProviderByIdResponse(rsp)
}

func (c *ClientWithResponses) UpdateProviderByIdWithResponse(ctx context.Context, ref string, providerId string, body UpdateProviderByIdJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateProviderByIdResponse, error) {
	rsp, err := c.UpdateProviderById(ctx, ref, providerId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateProviderByIdResponse(rsp)
}

// V1GetPgbouncerConfigWithResponse request returning *V1GetPgbouncerConfigResponse
func (c *ClientWithResponses) V1GetPgbouncerConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*V1GetPgbouncerConfigResponse, error) {
	rsp, err := c.V1GetPgbouncerConfig(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1GetPgbouncerConfigResponse(rsp)
}

// GetConfigWithResponse request returning *GetConfigResponse
func (c *ClientWithResponses) GetConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetConfigResponse, error) {
	rsp, err := c.GetConfig(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConfigResponse(rsp)
}

// UpdateConfigWithBodyWithResponse request with arbitrary body returning *UpdateConfigResponse
func (c *ClientWithResponses) UpdateConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error) {
	rsp, err := c.UpdateConfigWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateConfigWithResponse(ctx context.Context, ref string, body UpdateConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateConfigResponse, error) {
	rsp, err := c.UpdateConfig(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConfigResponse(rsp)
}

// RemoveCustomHostnameConfigWithResponse request returning *RemoveCustomHostnameConfigResponse
func (c *ClientWithResponses) RemoveCustomHostnameConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*RemoveCustomHostnameConfigResponse, error) {
	rsp, err := c.RemoveCustomHostnameConfig(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveCustomHostnameConfigResponse(rsp)
}

// GetCustomHostnameConfigWithResponse request returning *GetCustomHostnameConfigResponse
func (c *ClientWithResponses) GetCustomHostnameConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetCustomHostnameConfigResponse, error) {
	rsp, err := c.GetCustomHostnameConfig(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCustomHostnameConfigResponse(rsp)
}

// ActivateWithResponse request returning *ActivateResponse
func (c *ClientWithResponses) ActivateWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*ActivateResponse, error) {
	rsp, err := c.Activate(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateResponse(rsp)
}

// CreateCustomHostnameConfigWithBodyWithResponse request with arbitrary body returning *CreateCustomHostnameConfigResponse
func (c *ClientWithResponses) CreateCustomHostnameConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCustomHostnameConfigResponse, error) {
	rsp, err := c.CreateCustomHostnameConfigWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomHostnameConfigResponse(rsp)
}

func (c *ClientWithResponses) CreateCustomHostnameConfigWithResponse(ctx context.Context, ref string, body CreateCustomHostnameConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateCustomHostnameConfigResponse, error) {
	rsp, err := c.CreateCustomHostnameConfig(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCustomHostnameConfigResponse(rsp)
}

// ReverifyWithResponse request returning *ReverifyResponse
func (c *ClientWithResponses) ReverifyWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*ReverifyResponse, error) {
	rsp, err := c.Reverify(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseReverifyResponse(rsp)
}

// V1RestorePitrWithBodyWithResponse request with arbitrary body returning *V1RestorePitrResponse
func (c *ClientWithResponses) V1RestorePitrWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1RestorePitrResponse, error) {
	rsp, err := c.V1RestorePitrWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1RestorePitrResponse(rsp)
}

func (c *ClientWithResponses) V1RestorePitrWithResponse(ctx context.Context, ref string, body V1RestorePitrJSONRequestBody, reqEditors ...RequestEditorFn) (*V1RestorePitrResponse, error) {
	rsp, err := c.V1RestorePitr(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1RestorePitrResponse(rsp)
}

// V1RunQueryWithBodyWithResponse request with arbitrary body returning *V1RunQueryResponse
func (c *ClientWithResponses) V1RunQueryWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*V1RunQueryResponse, error) {
	rsp, err := c.V1RunQueryWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1RunQueryResponse(rsp)
}

func (c *ClientWithResponses) V1RunQueryWithResponse(ctx context.Context, ref string, body V1RunQueryJSONRequestBody, reqEditors ...RequestEditorFn) (*V1RunQueryResponse, error) {
	rsp, err := c.V1RunQuery(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1RunQueryResponse(rsp)
}

// V1EnableDatabaseWebhooksWithResponse request returning *V1EnableDatabaseWebhooksResponse
func (c *ClientWithResponses) V1EnableDatabaseWebhooksWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*V1EnableDatabaseWebhooksResponse, error) {
	rsp, err := c.V1EnableDatabaseWebhooks(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseV1EnableDatabaseWebhooksResponse(rsp)
}

// GetFunctionsWithResponse request returning *GetFunctionsResponse
func (c *ClientWithResponses) GetFunctionsWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetFunctionsResponse, error) {
	rsp, err := c.GetFunctions(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionsResponse(rsp)
}

// CreateFunctionWithBodyWithResponse request with arbitrary body returning *CreateFunctionResponse
func (c *ClientWithResponses) CreateFunctionWithBodyWithResponse(ctx context.Context, ref string, params *CreateFunctionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateFunctionResponse, error) {
	rsp, err := c.CreateFunctionWithBody(ctx, ref, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionResponse(rsp)
}

func (c *ClientWithResponses) CreateFunctionWithResponse(ctx context.Context, ref string, params *CreateFunctionParams, body CreateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateFunctionResponse, error) {
	rsp, err := c.CreateFunction(ctx, ref, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateFunctionResponse(rsp)
}

// DeleteFunctionWithResponse request returning *DeleteFunctionResponse
func (c *ClientWithResponses) DeleteFunctionWithResponse(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*DeleteFunctionResponse, error) {
	rsp, err := c.DeleteFunction(ctx, ref, functionSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteFunctionResponse(rsp)
}

// GetFunctionWithResponse request returning *GetFunctionResponse
func (c *ClientWithResponses) GetFunctionWithResponse(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*GetFunctionResponse, error) {
	rsp, err := c.GetFunction(ctx, ref, functionSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionResponse(rsp)
}

// UpdateFunctionWithBodyWithResponse request with arbitrary body returning *UpdateFunctionResponse
func (c *ClientWithResponses) UpdateFunctionWithBodyWithResponse(ctx context.Context, ref string, functionSlug string, params *UpdateFunctionParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateFunctionResponse, error) {
	rsp, err := c.UpdateFunctionWithBody(ctx, ref, functionSlug, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionResponse(rsp)
}

func (c *ClientWithResponses) UpdateFunctionWithResponse(ctx context.Context, ref string, functionSlug string, params *UpdateFunctionParams, body UpdateFunctionJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateFunctionResponse, error) {
	rsp, err := c.UpdateFunction(ctx, ref, functionSlug, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateFunctionResponse(rsp)
}

// GetFunctionBodyWithResponse request returning *GetFunctionBodyResponse
func (c *ClientWithResponses) GetFunctionBodyWithResponse(ctx context.Context, ref string, functionSlug string, reqEditors ...RequestEditorFn) (*GetFunctionBodyResponse, error) {
	rsp, err := c.GetFunctionBody(ctx, ref, functionSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFunctionBodyResponse(rsp)
}

// CheckServiceHealthWithResponse request returning *CheckServiceHealthResponse
func (c *ClientWithResponses) CheckServiceHealthWithResponse(ctx context.Context, ref string, params *CheckServiceHealthParams, reqEditors ...RequestEditorFn) (*CheckServiceHealthResponse, error) {
	rsp, err := c.CheckServiceHealth(ctx, ref, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckServiceHealthResponse(rsp)
}

// RemoveNetworkBanWithBodyWithResponse request with arbitrary body returning *RemoveNetworkBanResponse
func (c *ClientWithResponses) RemoveNetworkBanWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RemoveNetworkBanResponse, error) {
	rsp, err := c.RemoveNetworkBanWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveNetworkBanResponse(rsp)
}

func (c *ClientWithResponses) RemoveNetworkBanWithResponse(ctx context.Context, ref string, body RemoveNetworkBanJSONRequestBody, reqEditors ...RequestEditorFn) (*RemoveNetworkBanResponse, error) {
	rsp, err := c.RemoveNetworkBan(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveNetworkBanResponse(rsp)
}

// GetNetworkBansWithResponse request returning *GetNetworkBansResponse
func (c *ClientWithResponses) GetNetworkBansWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetNetworkBansResponse, error) {
	rsp, err := c.GetNetworkBans(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNetworkBansResponse(rsp)
}

// GetNetworkRestrictionsWithResponse request returning *GetNetworkRestrictionsResponse
func (c *ClientWithResponses) GetNetworkRestrictionsWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetNetworkRestrictionsResponse, error) {
	rsp, err := c.GetNetworkRestrictions(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNetworkRestrictionsResponse(rsp)
}

// ApplyNetworkRestrictionsWithBodyWithResponse request with arbitrary body returning *ApplyNetworkRestrictionsResponse
func (c *ClientWithResponses) ApplyNetworkRestrictionsWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ApplyNetworkRestrictionsResponse, error) {
	rsp, err := c.ApplyNetworkRestrictionsWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplyNetworkRestrictionsResponse(rsp)
}

func (c *ClientWithResponses) ApplyNetworkRestrictionsWithResponse(ctx context.Context, ref string, body ApplyNetworkRestrictionsJSONRequestBody, reqEditors ...RequestEditorFn) (*ApplyNetworkRestrictionsResponse, error) {
	rsp, err := c.ApplyNetworkRestrictions(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseApplyNetworkRestrictionsResponse(rsp)
}

// GetPgsodiumConfigWithResponse request returning *GetPgsodiumConfigResponse
func (c *ClientWithResponses) GetPgsodiumConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetPgsodiumConfigResponse, error) {
	rsp, err := c.GetPgsodiumConfig(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPgsodiumConfigResponse(rsp)
}

// UpdatePgsodiumConfigWithBodyWithResponse request with arbitrary body returning *UpdatePgsodiumConfigResponse
func (c *ClientWithResponses) UpdatePgsodiumConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePgsodiumConfigResponse, error) {
	rsp, err := c.UpdatePgsodiumConfigWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePgsodiumConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdatePgsodiumConfigWithResponse(ctx context.Context, ref string, body UpdatePgsodiumConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePgsodiumConfigResponse, error) {
	rsp, err := c.UpdatePgsodiumConfig(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePgsodiumConfigResponse(rsp)
}

// GetPostgRESTConfigWithResponse request returning *GetPostgRESTConfigResponse
func (c *ClientWithResponses) GetPostgRESTConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetPostgRESTConfigResponse, error) {
	rsp, err := c.GetPostgRESTConfig(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPostgRESTConfigResponse(rsp)
}

// UpdatePostgRESTConfigWithBodyWithResponse request with arbitrary body returning *UpdatePostgRESTConfigResponse
func (c *ClientWithResponses) UpdatePostgRESTConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePostgRESTConfigResponse, error) {
	rsp, err := c.UpdatePostgRESTConfigWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostgRESTConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdatePostgRESTConfigWithResponse(ctx context.Context, ref string, body UpdatePostgRESTConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdatePostgRESTConfigResponse, error) {
	rsp, err := c.UpdatePostgRESTConfig(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePostgRESTConfigResponse(rsp)
}

// GetReadOnlyModeStatusWithResponse request returning *GetReadOnlyModeStatusResponse
func (c *ClientWithResponses) GetReadOnlyModeStatusWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetReadOnlyModeStatusResponse, error) {
	rsp, err := c.GetReadOnlyModeStatus(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetReadOnlyModeStatusResponse(rsp)
}

// TemporarilyDisableReadonlyModeWithResponse request returning *TemporarilyDisableReadonlyModeResponse
func (c *ClientWithResponses) TemporarilyDisableReadonlyModeWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*TemporarilyDisableReadonlyModeResponse, error) {
	rsp, err := c.TemporarilyDisableReadonlyMode(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTemporarilyDisableReadonlyModeResponse(rsp)
}

// DeleteSecretsWithBodyWithResponse request with arbitrary body returning *DeleteSecretsResponse
func (c *ClientWithResponses) DeleteSecretsWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteSecretsResponse, error) {
	rsp, err := c.DeleteSecretsWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretsResponse(rsp)
}

func (c *ClientWithResponses) DeleteSecretsWithResponse(ctx context.Context, ref string, body DeleteSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteSecretsResponse, error) {
	rsp, err := c.DeleteSecrets(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSecretsResponse(rsp)
}

// GetSecretsWithResponse request returning *GetSecretsResponse
func (c *ClientWithResponses) GetSecretsWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetSecretsResponse, error) {
	rsp, err := c.GetSecrets(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSecretsResponse(rsp)
}

// CreateSecretsWithBodyWithResponse request with arbitrary body returning *CreateSecretsResponse
func (c *ClientWithResponses) CreateSecretsWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSecretsResponse, error) {
	rsp, err := c.CreateSecretsWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecretsResponse(rsp)
}

func (c *ClientWithResponses) CreateSecretsWithResponse(ctx context.Context, ref string, body CreateSecretsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateSecretsResponse, error) {
	rsp, err := c.CreateSecrets(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSecretsResponse(rsp)
}

// GetSslEnforcementConfigWithResponse request returning *GetSslEnforcementConfigResponse
func (c *ClientWithResponses) GetSslEnforcementConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetSslEnforcementConfigResponse, error) {
	rsp, err := c.GetSslEnforcementConfig(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSslEnforcementConfigResponse(rsp)
}

// UpdateSslEnforcementConfigWithBodyWithResponse request with arbitrary body returning *UpdateSslEnforcementConfigResponse
func (c *ClientWithResponses) UpdateSslEnforcementConfigWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSslEnforcementConfigResponse, error) {
	rsp, err := c.UpdateSslEnforcementConfigWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSslEnforcementConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateSslEnforcementConfigWithResponse(ctx context.Context, ref string, body UpdateSslEnforcementConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateSslEnforcementConfigResponse, error) {
	rsp, err := c.UpdateSslEnforcementConfig(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSslEnforcementConfigResponse(rsp)
}

// GetTypescriptTypesWithResponse request returning *GetTypescriptTypesResponse
func (c *ClientWithResponses) GetTypescriptTypesWithResponse(ctx context.Context, ref string, params *GetTypescriptTypesParams, reqEditors ...RequestEditorFn) (*GetTypescriptTypesResponse, error) {
	rsp, err := c.GetTypescriptTypes(ctx, ref, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTypescriptTypesResponse(rsp)
}

// UpgradeProjectWithBodyWithResponse request with arbitrary body returning *UpgradeProjectResponse
func (c *ClientWithResponses) UpgradeProjectWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpgradeProjectResponse, error) {
	rsp, err := c.UpgradeProjectWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpgradeProjectResponse(rsp)
}

func (c *ClientWithResponses) UpgradeProjectWithResponse(ctx context.Context, ref string, body UpgradeProjectJSONRequestBody, reqEditors ...RequestEditorFn) (*UpgradeProjectResponse, error) {
	rsp, err := c.UpgradeProject(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpgradeProjectResponse(rsp)
}

// UpgradeEligibilityInformationWithResponse request returning *UpgradeEligibilityInformationResponse
func (c *ClientWithResponses) UpgradeEligibilityInformationWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*UpgradeEligibilityInformationResponse, error) {
	rsp, err := c.UpgradeEligibilityInformation(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpgradeEligibilityInformationResponse(rsp)
}

// GetUpgradeStatusWithResponse request returning *GetUpgradeStatusResponse
func (c *ClientWithResponses) GetUpgradeStatusWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetUpgradeStatusResponse, error) {
	rsp, err := c.GetUpgradeStatus(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUpgradeStatusResponse(rsp)
}

// RemoveVanitySubdomainConfigWithResponse request returning *RemoveVanitySubdomainConfigResponse
func (c *ClientWithResponses) RemoveVanitySubdomainConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*RemoveVanitySubdomainConfigResponse, error) {
	rsp, err := c.RemoveVanitySubdomainConfig(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveVanitySubdomainConfigResponse(rsp)
}

// GetVanitySubdomainConfigWithResponse request returning *GetVanitySubdomainConfigResponse
func (c *ClientWithResponses) GetVanitySubdomainConfigWithResponse(ctx context.Context, ref string, reqEditors ...RequestEditorFn) (*GetVanitySubdomainConfigResponse, error) {
	rsp, err := c.GetVanitySubdomainConfig(ctx, ref, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVanitySubdomainConfigResponse(rsp)
}

// ActivateVanitySubdomainPleaseWithBodyWithResponse request with arbitrary body returning *ActivateVanitySubdomainPleaseResponse
func (c *ClientWithResponses) ActivateVanitySubdomainPleaseWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ActivateVanitySubdomainPleaseResponse, error) {
	rsp, err := c.ActivateVanitySubdomainPleaseWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateVanitySubdomainPleaseResponse(rsp)
}

func (c *ClientWithResponses) ActivateVanitySubdomainPleaseWithResponse(ctx context.Context, ref string, body ActivateVanitySubdomainPleaseJSONRequestBody, reqEditors ...RequestEditorFn) (*ActivateVanitySubdomainPleaseResponse, error) {
	rsp, err := c.ActivateVanitySubdomainPlease(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseActivateVanitySubdomainPleaseResponse(rsp)
}

// CheckVanitySubdomainAvailabilityWithBodyWithResponse request with arbitrary body returning *CheckVanitySubdomainAvailabilityResponse
func (c *ClientWithResponses) CheckVanitySubdomainAvailabilityWithBodyWithResponse(ctx context.Context, ref string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CheckVanitySubdomainAvailabilityResponse, error) {
	rsp, err := c.CheckVanitySubdomainAvailabilityWithBody(ctx, ref, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckVanitySubdomainAvailabilityResponse(rsp)
}

func (c *ClientWithResponses) CheckVanitySubdomainAvailabilityWithResponse(ctx context.Context, ref string, body CheckVanitySubdomainAvailabilityJSONRequestBody, reqEditors ...RequestEditorFn) (*CheckVanitySubdomainAvailabilityResponse, error) {
	rsp, err := c.CheckVanitySubdomainAvailability(ctx, ref, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCheckVanitySubdomainAvailabilityResponse(rsp)
}

// ListSnippetsWithResponse request returning *ListSnippetsResponse
func (c *ClientWithResponses) ListSnippetsWithResponse(ctx context.Context, params *ListSnippetsParams, reqEditors ...RequestEditorFn) (*ListSnippetsResponse, error) {
	rsp, err := c.ListSnippets(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSnippetsResponse(rsp)
}

// GetSnippetWithResponse request returning *GetSnippetResponse
func (c *ClientWithResponses) GetSnippetWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetSnippetResponse, error) {
	rsp, err := c.GetSnippet(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSnippetResponse(rsp)
}

// ParseDeleteBranchResponse parses an HTTP response from a DeleteBranchWithResponse call
func ParseDeleteBranchResponse(rsp *http.Response) (*DeleteBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBranchDetailsResponse parses an HTTP response from a GetBranchDetailsWithResponse call
func ParseGetBranchDetailsResponse(rsp *http.Response) (*GetBranchDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBranchDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BranchDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateBranchResponse parses an HTTP response from a UpdateBranchWithResponse call
func ParseUpdateBranchResponse(rsp *http.Response) (*UpdateBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BranchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAuthorizeResponse parses an HTTP response from a AuthorizeWithResponse call
func ParseAuthorizeResponse(rsp *http.Response) (*AuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseTokenResponse parses an HTTP response from a TokenWithResponse call
func ParseTokenResponse(rsp *http.Response) (*TokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OAuthTokenResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetOrganizationsResponse parses an HTTP response from a GetOrganizationsWithResponse call
func ParseGetOrganizationsResponse(rsp *http.Response) (*GetOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateOrganizationResponse parses an HTTP response from a CreateOrganizationWithResponse call
func ParseCreateOrganizationResponse(rsp *http.Response) (*CreateOrganizationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateOrganizationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest OrganizationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseV1ListOrganizationMembersResponse parses an HTTP response from a V1ListOrganizationMembersWithResponse call
func ParseV1ListOrganizationMembersResponse(rsp *http.Response) (*V1ListOrganizationMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1ListOrganizationMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []V1OrganizationMemberResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectsResponse parses an HTTP response from a GetProjectsWithResponse call
func ParseGetProjectsResponse(rsp *http.Response) (*GetProjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ProjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProjectResponse parses an HTTP response from a CreateProjectWithResponse call
func ParseCreateProjectResponse(rsp *http.Response) (*CreateProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ProjectResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteProjectResponse parses an HTTP response from a DeleteProjectWithResponse call
func ParseDeleteProjectResponse(rsp *http.Response) (*DeleteProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectRefResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProjectApiKeysResponse parses an HTTP response from a GetProjectApiKeysWithResponse call
func ParseGetProjectApiKeysResponse(rsp *http.Response) (*GetProjectApiKeysResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProjectApiKeysResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApiKeyResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDisableBranchResponse parses an HTTP response from a DisableBranchWithResponse call
func ParseDisableBranchResponse(rsp *http.Response) (*DisableBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisableBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBranchesResponse parses an HTTP response from a GetBranchesWithResponse call
func ParseGetBranchesResponse(rsp *http.Response) (*GetBranchesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBranchesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []BranchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateBranchResponse parses an HTTP response from a CreateBranchWithResponse call
func ParseCreateBranchResponse(rsp *http.Response) (*CreateBranchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateBranchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest BranchResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetV1AuthConfigResponse parses an HTTP response from a GetV1AuthConfigWithResponse call
func ParseGetV1AuthConfigResponse(rsp *http.Response) (*GetV1AuthConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetV1AuthConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateV1AuthConfigResponse parses an HTTP response from a UpdateV1AuthConfigWithResponse call
func ParseUpdateV1AuthConfigResponse(rsp *http.Response) (*UpdateV1AuthConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateV1AuthConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAllProvidersResponse parses an HTTP response from a ListAllProvidersWithResponse call
func ParseListAllProvidersResponse(rsp *http.Response) (*ListAllProvidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAllProvidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ListProvidersResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateProviderForProjectResponse parses an HTTP response from a CreateProviderForProjectWithResponse call
func ParseCreateProviderForProjectResponse(rsp *http.Response) (*CreateProviderForProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateProviderForProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest CreateProviderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseRemoveProviderByIdResponse parses an HTTP response from a RemoveProviderByIdWithResponse call
func ParseRemoveProviderByIdResponse(rsp *http.Response) (*RemoveProviderByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveProviderByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DeleteProviderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetProviderByIdResponse parses an HTTP response from a GetProviderByIdWithResponse call
func ParseGetProviderByIdResponse(rsp *http.Response) (*GetProviderByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProviderByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProviderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateProviderByIdResponse parses an HTTP response from a UpdateProviderByIdWithResponse call
func ParseUpdateProviderByIdResponse(rsp *http.Response) (*UpdateProviderByIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateProviderByIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateProviderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseV1GetPgbouncerConfigResponse parses an HTTP response from a V1GetPgbouncerConfigWithResponse call
func ParseV1GetPgbouncerConfigResponse(rsp *http.Response) (*V1GetPgbouncerConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1GetPgbouncerConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest V1PgbouncerConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetConfigResponse parses an HTTP response from a GetConfigWithResponse call
func ParseGetConfigResponse(rsp *http.Response) (*GetConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostgresConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateConfigResponse parses an HTTP response from a UpdateConfigWithResponse call
func ParseUpdateConfigResponse(rsp *http.Response) (*UpdateConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostgresConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveCustomHostnameConfigResponse parses an HTTP response from a RemoveCustomHostnameConfigWithResponse call
func ParseRemoveCustomHostnameConfigResponse(rsp *http.Response) (*RemoveCustomHostnameConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveCustomHostnameConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetCustomHostnameConfigResponse parses an HTTP response from a GetCustomHostnameConfigWithResponse call
func ParseGetCustomHostnameConfigResponse(rsp *http.Response) (*GetCustomHostnameConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCustomHostnameConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UpdateCustomHostnameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActivateResponse parses an HTTP response from a ActivateWithResponse call
func ParseActivateResponse(rsp *http.Response) (*ActivateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UpdateCustomHostnameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateCustomHostnameConfigResponse parses an HTTP response from a CreateCustomHostnameConfigWithResponse call
func ParseCreateCustomHostnameConfigResponse(rsp *http.Response) (*CreateCustomHostnameConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCustomHostnameConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UpdateCustomHostnameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseReverifyResponse parses an HTTP response from a ReverifyWithResponse call
func ParseReverifyResponse(rsp *http.Response) (*ReverifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ReverifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest UpdateCustomHostnameResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseV1RestorePitrResponse parses an HTTP response from a V1RestorePitrWithResponse call
func ParseV1RestorePitrResponse(rsp *http.Response) (*V1RestorePitrResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1RestorePitrResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseV1RunQueryResponse parses an HTTP response from a V1RunQueryWithResponse call
func ParseV1RunQueryResponse(rsp *http.Response) (*V1RunQueryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1RunQueryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseV1EnableDatabaseWebhooksResponse parses an HTTP response from a V1EnableDatabaseWebhooksWithResponse call
func ParseV1EnableDatabaseWebhooksResponse(rsp *http.Response) (*V1EnableDatabaseWebhooksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &V1EnableDatabaseWebhooksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionsResponse parses an HTTP response from a GetFunctionsWithResponse call
func ParseGetFunctionsResponse(rsp *http.Response) (*GetFunctionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []FunctionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateFunctionResponse parses an HTTP response from a CreateFunctionWithResponse call
func ParseCreateFunctionResponse(rsp *http.Response) (*CreateFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest FunctionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteFunctionResponse parses an HTTP response from a DeleteFunctionWithResponse call
func ParseDeleteFunctionResponse(rsp *http.Response) (*DeleteFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetFunctionResponse parses an HTTP response from a GetFunctionWithResponse call
func ParseGetFunctionResponse(rsp *http.Response) (*GetFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionSlugResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateFunctionResponse parses an HTTP response from a UpdateFunctionWithResponse call
func ParseUpdateFunctionResponse(rsp *http.Response) (*UpdateFunctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateFunctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FunctionResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetFunctionBodyResponse parses an HTTP response from a GetFunctionBodyWithResponse call
func ParseGetFunctionBodyResponse(rsp *http.Response) (*GetFunctionBodyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFunctionBodyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseCheckServiceHealthResponse parses an HTTP response from a CheckServiceHealthWithResponse call
func ParseCheckServiceHealthResponse(rsp *http.Response) (*CheckServiceHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckServiceHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ServiceHealthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveNetworkBanResponse parses an HTTP response from a RemoveNetworkBanWithResponse call
func ParseRemoveNetworkBanResponse(rsp *http.Response) (*RemoveNetworkBanResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveNetworkBanResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNetworkBansResponse parses an HTTP response from a GetNetworkBansWithResponse call
func ParseGetNetworkBansResponse(rsp *http.Response) (*GetNetworkBansResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNetworkBansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NetworkBanResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetNetworkRestrictionsResponse parses an HTTP response from a GetNetworkRestrictionsWithResponse call
func ParseGetNetworkRestrictionsResponse(rsp *http.Response) (*GetNetworkRestrictionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNetworkRestrictionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NetworkRestrictionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseApplyNetworkRestrictionsResponse parses an HTTP response from a ApplyNetworkRestrictionsWithResponse call
func ParseApplyNetworkRestrictionsResponse(rsp *http.Response) (*ApplyNetworkRestrictionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ApplyNetworkRestrictionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest NetworkRestrictionsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetPgsodiumConfigResponse parses an HTTP response from a GetPgsodiumConfigWithResponse call
func ParseGetPgsodiumConfigResponse(rsp *http.Response) (*GetPgsodiumConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPgsodiumConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PgsodiumConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePgsodiumConfigResponse parses an HTTP response from a UpdatePgsodiumConfigWithResponse call
func ParseUpdatePgsodiumConfigResponse(rsp *http.Response) (*UpdatePgsodiumConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePgsodiumConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PgsodiumConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetPostgRESTConfigResponse parses an HTTP response from a GetPostgRESTConfigWithResponse call
func ParseGetPostgRESTConfigResponse(rsp *http.Response) (*GetPostgRESTConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPostgRESTConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostgrestConfigWithJWTSecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdatePostgRESTConfigResponse parses an HTTP response from a UpdatePostgRESTConfigWithResponse call
func ParseUpdatePostgRESTConfigResponse(rsp *http.Response) (*UpdatePostgRESTConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePostgRESTConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PostgrestConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetReadOnlyModeStatusResponse parses an HTTP response from a GetReadOnlyModeStatusWithResponse call
func ParseGetReadOnlyModeStatusResponse(rsp *http.Response) (*GetReadOnlyModeStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetReadOnlyModeStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReadOnlyStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseTemporarilyDisableReadonlyModeResponse parses an HTTP response from a TemporarilyDisableReadonlyModeWithResponse call
func ParseTemporarilyDisableReadonlyModeResponse(rsp *http.Response) (*TemporarilyDisableReadonlyModeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TemporarilyDisableReadonlyModeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteSecretsResponse parses an HTTP response from a DeleteSecretsWithResponse call
func ParseDeleteSecretsResponse(rsp *http.Response) (*DeleteSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSecretsResponse parses an HTTP response from a GetSecretsWithResponse call
func ParseGetSecretsResponse(rsp *http.Response) (*GetSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SecretResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSecretsResponse parses an HTTP response from a CreateSecretsWithResponse call
func ParseCreateSecretsResponse(rsp *http.Response) (*CreateSecretsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSecretsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSslEnforcementConfigResponse parses an HTTP response from a GetSslEnforcementConfigWithResponse call
func ParseGetSslEnforcementConfigResponse(rsp *http.Response) (*GetSslEnforcementConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSslEnforcementConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslEnforcementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSslEnforcementConfigResponse parses an HTTP response from a UpdateSslEnforcementConfigWithResponse call
func ParseUpdateSslEnforcementConfigResponse(rsp *http.Response) (*UpdateSslEnforcementConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSslEnforcementConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SslEnforcementResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTypescriptTypesResponse parses an HTTP response from a GetTypescriptTypesWithResponse call
func ParseGetTypescriptTypesResponse(rsp *http.Response) (*GetTypescriptTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTypescriptTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TypescriptResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpgradeProjectResponse parses an HTTP response from a UpgradeProjectWithResponse call
func ParseUpgradeProjectResponse(rsp *http.Response) (*UpgradeProjectResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpgradeProjectResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpgradeEligibilityInformationResponse parses an HTTP response from a UpgradeEligibilityInformationWithResponse call
func ParseUpgradeEligibilityInformationResponse(rsp *http.Response) (*UpgradeEligibilityInformationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpgradeEligibilityInformationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProjectUpgradeEligibilityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetUpgradeStatusResponse parses an HTTP response from a GetUpgradeStatusWithResponse call
func ParseGetUpgradeStatusResponse(rsp *http.Response) (*GetUpgradeStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUpgradeStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DatabaseUpgradeStatusResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRemoveVanitySubdomainConfigResponse parses an HTTP response from a RemoveVanitySubdomainConfigWithResponse call
func ParseRemoveVanitySubdomainConfigResponse(rsp *http.Response) (*RemoveVanitySubdomainConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveVanitySubdomainConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetVanitySubdomainConfigResponse parses an HTTP response from a GetVanitySubdomainConfigWithResponse call
func ParseGetVanitySubdomainConfigResponse(rsp *http.Response) (*GetVanitySubdomainConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVanitySubdomainConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VanitySubdomainConfigResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseActivateVanitySubdomainPleaseResponse parses an HTTP response from a ActivateVanitySubdomainPleaseWithResponse call
func ParseActivateVanitySubdomainPleaseResponse(rsp *http.Response) (*ActivateVanitySubdomainPleaseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ActivateVanitySubdomainPleaseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ActivateVanitySubdomainResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCheckVanitySubdomainAvailabilityResponse parses an HTTP response from a CheckVanitySubdomainAvailabilityWithResponse call
func ParseCheckVanitySubdomainAvailabilityResponse(rsp *http.Response) (*CheckVanitySubdomainAvailabilityResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CheckVanitySubdomainAvailabilityResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest SubdomainAvailabilityResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListSnippetsResponse parses an HTTP response from a ListSnippetsWithResponse call
func ParseListSnippetsResponse(rsp *http.Response) (*ListSnippetsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSnippetsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnippetList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSnippetResponse parses an HTTP response from a GetSnippetWithResponse call
func ParseGetSnippetResponse(rsp *http.Response) (*GetSnippetResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSnippetResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SnippetResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Delete a database branch
	// (DELETE /v1/branches/{branch_id})
	DeleteBranch(ctx echo.Context, branchId string) error
	// Get database branch config
	// (GET /v1/branches/{branch_id})
	GetBranchDetails(ctx echo.Context, branchId string) error
	// Update database branch config
	// (PATCH /v1/branches/{branch_id})
	UpdateBranch(ctx echo.Context, branchId string) error
	// Authorize user through oauth
	// (GET /v1/oauth/authorize)
	Authorize(ctx echo.Context, params AuthorizeParams) error
	// Exchange auth code for user's access and refresh token
	// (POST /v1/oauth/token)
	Token(ctx echo.Context) error
	// List all organizations
	// (GET /v1/organizations)
	GetOrganizations(ctx echo.Context) error
	// Create an organization
	// (POST /v1/organizations)
	CreateOrganization(ctx echo.Context) error
	// List members of an organization
	// (GET /v1/organizations/{slug}/members)
	V1ListOrganizationMembers(ctx echo.Context, slug string) error
	// List all projects
	// (GET /v1/projects)
	GetProjects(ctx echo.Context) error
	// Create a project
	// (POST /v1/projects)
	CreateProject(ctx echo.Context) error
	// Deletes the given project
	// (DELETE /v1/projects/{ref})
	DeleteProject(ctx echo.Context, ref string) error

	// (GET /v1/projects/{ref}/api-keys)
	GetProjectApiKeys(ctx echo.Context, ref string) error
	// Disables preview branching
	// (DELETE /v1/projects/{ref}/branches)
	DisableBranch(ctx echo.Context, ref string) error
	// List all database branches
	// (GET /v1/projects/{ref}/branches)
	GetBranches(ctx echo.Context, ref string) error
	// Create a database branch
	// (POST /v1/projects/{ref}/branches)
	CreateBranch(ctx echo.Context, ref string) error
	// Gets project's auth config
	// (GET /v1/projects/{ref}/config/auth)
	GetV1AuthConfig(ctx echo.Context, ref string) error
	// Updates a project's auth config
	// (PATCH /v1/projects/{ref}/config/auth)
	UpdateV1AuthConfig(ctx echo.Context, ref string) error
	// Lists all SSO providers
	// (GET /v1/projects/{ref}/config/auth/sso/providers)
	ListAllProviders(ctx echo.Context, ref string) error
	// Creates a new SSO provider
	// (POST /v1/projects/{ref}/config/auth/sso/providers)
	CreateProviderForProject(ctx echo.Context, ref string) error
	// Removes a SSO provider by its UUID
	// (DELETE /v1/projects/{ref}/config/auth/sso/providers/{provider_id})
	RemoveProviderById(ctx echo.Context, ref string, providerId string) error
	// Gets a SSO provider by its UUID
	// (GET /v1/projects/{ref}/config/auth/sso/providers/{provider_id})
	GetProviderById(ctx echo.Context, ref string, providerId string) error
	// Updates a SSO provider by its UUID
	// (PUT /v1/projects/{ref}/config/auth/sso/providers/{provider_id})
	UpdateProviderById(ctx echo.Context, ref string, providerId string) error
	// Get project's pgbouncer config
	// (GET /v1/projects/{ref}/config/database/pgbouncer)
	V1GetPgbouncerConfig(ctx echo.Context, ref string) error
	// Gets project's Postgres config
	// (GET /v1/projects/{ref}/config/database/postgres)
	GetConfig(ctx echo.Context, ref string) error
	// Updates project's Postgres config
	// (PUT /v1/projects/{ref}/config/database/postgres)
	UpdateConfig(ctx echo.Context, ref string) error
	// Deletes a project's custom hostname configuration
	// (DELETE /v1/projects/{ref}/custom-hostname)
	RemoveCustomHostnameConfig(ctx echo.Context, ref string) error
	// Gets project's custom hostname config
	// (GET /v1/projects/{ref}/custom-hostname)
	GetCustomHostnameConfig(ctx echo.Context, ref string) error
	// Activates a custom hostname for a project.
	// (POST /v1/projects/{ref}/custom-hostname/activate)
	Activate(ctx echo.Context, ref string) error
	// Updates project's custom hostname configuration
	// (POST /v1/projects/{ref}/custom-hostname/initialize)
	CreateCustomHostnameConfig(ctx echo.Context, ref string) error
	// Attempts to verify the DNS configuration for project's custom hostname configuration
	// (POST /v1/projects/{ref}/custom-hostname/reverify)
	Reverify(ctx echo.Context, ref string) error
	// Restores a PITR backup for a database
	// (POST /v1/projects/{ref}/database/backups/restore-pitr)
	V1RestorePitr(ctx echo.Context, ref string) error
	// Run sql query
	// (POST /v1/projects/{ref}/database/query)
	V1RunQuery(ctx echo.Context, ref string) error
	// Enables Database Webhooks on the project
	// (POST /v1/projects/{ref}/database/webhooks/enable)
	V1EnableDatabaseWebhooks(ctx echo.Context, ref string) error
	// List all functions
	// (GET /v1/projects/{ref}/functions)
	GetFunctions(ctx echo.Context, ref string) error
	// Create a function
	// (POST /v1/projects/{ref}/functions)
	CreateFunction(ctx echo.Context, ref string, params CreateFunctionParams) error
	// Delete a function
	// (DELETE /v1/projects/{ref}/functions/{function_slug})
	DeleteFunction(ctx echo.Context, ref string, functionSlug string) error
	// Retrieve a function
	// (GET /v1/projects/{ref}/functions/{function_slug})
	GetFunction(ctx echo.Context, ref string, functionSlug string) error
	// Update a function
	// (PATCH /v1/projects/{ref}/functions/{function_slug})
	UpdateFunction(ctx echo.Context, ref string, functionSlug string, params UpdateFunctionParams) error
	// Retrieve a function body
	// (GET /v1/projects/{ref}/functions/{function_slug}/body)
	GetFunctionBody(ctx echo.Context, ref string, functionSlug string) error
	// Gets project's service health status
	// (GET /v1/projects/{ref}/health)
	CheckServiceHealth(ctx echo.Context, ref string, params CheckServiceHealthParams) error
	// Remove network bans.
	// (DELETE /v1/projects/{ref}/network-bans)
	RemoveNetworkBan(ctx echo.Context, ref string) error
	// Gets project's network bans
	// (POST /v1/projects/{ref}/network-bans/retrieve)
	GetNetworkBans(ctx echo.Context, ref string) error
	// Gets project's network restrictions
	// (GET /v1/projects/{ref}/network-restrictions)
	GetNetworkRestrictions(ctx echo.Context, ref string) error
	// Updates project's network restrictions
	// (POST /v1/projects/{ref}/network-restrictions/apply)
	ApplyNetworkRestrictions(ctx echo.Context, ref string) error
	// Gets project's pgsodium config
	// (GET /v1/projects/{ref}/pgsodium)
	GetPgsodiumConfig(ctx echo.Context, ref string) error
	// Updates project's pgsodium config. Updating the root_key can cause all data encrypted with the older key to become inaccessible.
	// (PUT /v1/projects/{ref}/pgsodium)
	UpdatePgsodiumConfig(ctx echo.Context, ref string) error
	// Gets project's postgrest config
	// (GET /v1/projects/{ref}/postgrest)
	GetPostgRESTConfig(ctx echo.Context, ref string) error
	// Updates project's postgrest config
	// (PATCH /v1/projects/{ref}/postgrest)
	UpdatePostgRESTConfig(ctx echo.Context, ref string) error
	// Returns project's readonly mode status
	// (GET /v1/projects/{ref}/readonly)
	GetReadOnlyModeStatus(ctx echo.Context, ref string) error
	// Disables project's readonly mode for the next 15 minutes
	// (POST /v1/projects/{ref}/readonly/temporary-disable)
	TemporarilyDisableReadonlyMode(ctx echo.Context, ref string) error
	// Bulk delete secrets
	// (DELETE /v1/projects/{ref}/secrets)
	DeleteSecrets(ctx echo.Context, ref string) error
	// List all secrets
	// (GET /v1/projects/{ref}/secrets)
	GetSecrets(ctx echo.Context, ref string) error
	// Bulk create secrets
	// (POST /v1/projects/{ref}/secrets)
	CreateSecrets(ctx echo.Context, ref string) error
	// Get project's SSL enforcement configuration.
	// (GET /v1/projects/{ref}/ssl-enforcement)
	GetSslEnforcementConfig(ctx echo.Context, ref string) error
	// Update project's SSL enforcement configuration.
	// (PUT /v1/projects/{ref}/ssl-enforcement)
	UpdateSslEnforcementConfig(ctx echo.Context, ref string) error
	// Generate TypeScript types
	// (GET /v1/projects/{ref}/types/typescript)
	GetTypescriptTypes(ctx echo.Context, ref string, params GetTypescriptTypesParams) error
	// Upgrades the project's Postgres version
	// (POST /v1/projects/{ref}/upgrade)
	UpgradeProject(ctx echo.Context, ref string) error
	// Returns the project's eligibility for upgrades
	// (GET /v1/projects/{ref}/upgrade/eligibility)
	UpgradeEligibilityInformation(ctx echo.Context, ref string) error
	// Gets the latest status of the project's upgrade
	// (GET /v1/projects/{ref}/upgrade/status)
	GetUpgradeStatus(ctx echo.Context, ref string) error
	// Deletes a project's vanity subdomain configuration
	// (DELETE /v1/projects/{ref}/vanity-subdomain)
	RemoveVanitySubdomainConfig(ctx echo.Context, ref string) error
	// Gets current vanity subdomain config
	// (GET /v1/projects/{ref}/vanity-subdomain)
	GetVanitySubdomainConfig(ctx echo.Context, ref string) error
	// Activates a vanity subdomain for a project.
	// (POST /v1/projects/{ref}/vanity-subdomain/activate)
	ActivateVanitySubdomainPlease(ctx echo.Context, ref string) error
	// Checks vanity subdomain availability
	// (POST /v1/projects/{ref}/vanity-subdomain/check-availability)
	CheckVanitySubdomainAvailability(ctx echo.Context, ref string) error
	// Lists SQL snippets for the logged in user
	// (GET /v1/snippets)
	ListSnippets(ctx echo.Context, params ListSnippetsParams) error
	// Gets a specific SQL snippet
	// (GET /v1/snippets/{id})
	GetSnippet(ctx echo.Context, id string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteBranch converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteBranch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "branch_id" -------------
	var branchId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "branch_id", runtime.ParamLocationPath, ctx.Param("branch_id"), &branchId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteBranch(ctx, branchId)
	return err
}

// GetBranchDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetBranchDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "branch_id" -------------
	var branchId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "branch_id", runtime.ParamLocationPath, ctx.Param("branch_id"), &branchId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBranchDetails(ctx, branchId)
	return err
}

// UpdateBranch converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateBranch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "branch_id" -------------
	var branchId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "branch_id", runtime.ParamLocationPath, ctx.Param("branch_id"), &branchId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter branch_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateBranch(ctx, branchId)
	return err
}

// Authorize converts echo context to params.
func (w *ServerInterfaceWrapper) Authorize(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params AuthorizeParams
	// ------------- Required query parameter "client_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "client_id", ctx.QueryParams(), &params.ClientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter client_id: %s", err))
	}

	// ------------- Required query parameter "response_type" -------------

	err = runtime.BindQueryParameter("form", true, true, "response_type", ctx.QueryParams(), &params.ResponseType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter response_type: %s", err))
	}

	// ------------- Required query parameter "redirect_uri" -------------

	err = runtime.BindQueryParameter("form", true, true, "redirect_uri", ctx.QueryParams(), &params.RedirectUri)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter redirect_uri: %s", err))
	}

	// ------------- Optional query parameter "scope" -------------

	err = runtime.BindQueryParameter("form", true, false, "scope", ctx.QueryParams(), &params.Scope)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter scope: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "response_mode" -------------

	err = runtime.BindQueryParameter("form", true, false, "response_mode", ctx.QueryParams(), &params.ResponseMode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter response_mode: %s", err))
	}

	// ------------- Optional query parameter "code_challenge" -------------

	err = runtime.BindQueryParameter("form", true, false, "code_challenge", ctx.QueryParams(), &params.CodeChallenge)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code_challenge: %s", err))
	}

	// ------------- Optional query parameter "code_challenge_method" -------------

	err = runtime.BindQueryParameter("form", true, false, "code_challenge_method", ctx.QueryParams(), &params.CodeChallengeMethod)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code_challenge_method: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Authorize(ctx, params)
	return err
}

// Token converts echo context to params.
func (w *ServerInterfaceWrapper) Token(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Token(ctx)
	return err
}

// GetOrganizations converts echo context to params.
func (w *ServerInterfaceWrapper) GetOrganizations(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetOrganizations(ctx)
	return err
}

// CreateOrganization converts echo context to params.
func (w *ServerInterfaceWrapper) CreateOrganization(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateOrganization(ctx)
	return err
}

// V1ListOrganizationMembers converts echo context to params.
func (w *ServerInterfaceWrapper) V1ListOrganizationMembers(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "slug" -------------
	var slug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "slug", runtime.ParamLocationPath, ctx.Param("slug"), &slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1ListOrganizationMembers(ctx, slug)
	return err
}

// GetProjects converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjects(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjects(ctx)
	return err
}

// CreateProject converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProject(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProject(ctx)
	return err
}

// DeleteProject converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteProject(ctx, ref)
	return err
}

// GetProjectApiKeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetProjectApiKeys(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProjectApiKeys(ctx, ref)
	return err
}

// DisableBranch converts echo context to params.
func (w *ServerInterfaceWrapper) DisableBranch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DisableBranch(ctx, ref)
	return err
}

// GetBranches converts echo context to params.
func (w *ServerInterfaceWrapper) GetBranches(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBranches(ctx, ref)
	return err
}

// CreateBranch converts echo context to params.
func (w *ServerInterfaceWrapper) CreateBranch(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateBranch(ctx, ref)
	return err
}

// GetV1AuthConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1AuthConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetV1AuthConfig(ctx, ref)
	return err
}

// UpdateV1AuthConfig converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateV1AuthConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateV1AuthConfig(ctx, ref)
	return err
}

// ListAllProviders converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllProviders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAllProviders(ctx, ref)
	return err
}

// CreateProviderForProject converts echo context to params.
func (w *ServerInterfaceWrapper) CreateProviderForProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateProviderForProject(ctx, ref)
	return err
}

// RemoveProviderById converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveProviderById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Path parameter "provider_id" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider_id", runtime.ParamLocationPath, ctx.Param("provider_id"), &providerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveProviderById(ctx, ref, providerId)
	return err
}

// GetProviderById converts echo context to params.
func (w *ServerInterfaceWrapper) GetProviderById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Path parameter "provider_id" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider_id", runtime.ParamLocationPath, ctx.Param("provider_id"), &providerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProviderById(ctx, ref, providerId)
	return err
}

// UpdateProviderById converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateProviderById(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Path parameter "provider_id" -------------
	var providerId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "provider_id", runtime.ParamLocationPath, ctx.Param("provider_id"), &providerId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter provider_id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateProviderById(ctx, ref, providerId)
	return err
}

// V1GetPgbouncerConfig converts echo context to params.
func (w *ServerInterfaceWrapper) V1GetPgbouncerConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1GetPgbouncerConfig(ctx, ref)
	return err
}

// GetConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetConfig(ctx, ref)
	return err
}

// UpdateConfig converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateConfig(ctx, ref)
	return err
}

// RemoveCustomHostnameConfig converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveCustomHostnameConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveCustomHostnameConfig(ctx, ref)
	return err
}

// GetCustomHostnameConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetCustomHostnameConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCustomHostnameConfig(ctx, ref)
	return err
}

// Activate converts echo context to params.
func (w *ServerInterfaceWrapper) Activate(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Activate(ctx, ref)
	return err
}

// CreateCustomHostnameConfig converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCustomHostnameConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCustomHostnameConfig(ctx, ref)
	return err
}

// Reverify converts echo context to params.
func (w *ServerInterfaceWrapper) Reverify(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Reverify(ctx, ref)
	return err
}

// V1RestorePitr converts echo context to params.
func (w *ServerInterfaceWrapper) V1RestorePitr(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1RestorePitr(ctx, ref)
	return err
}

// V1RunQuery converts echo context to params.
func (w *ServerInterfaceWrapper) V1RunQuery(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1RunQuery(ctx, ref)
	return err
}

// V1EnableDatabaseWebhooks converts echo context to params.
func (w *ServerInterfaceWrapper) V1EnableDatabaseWebhooks(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.V1EnableDatabaseWebhooks(ctx, ref)
	return err
}

// GetFunctions converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFunctions(ctx, ref)
	return err
}

// CreateFunction converts echo context to params.
func (w *ServerInterfaceWrapper) CreateFunction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateFunctionParams
	// ------------- Optional query parameter "slug" -------------

	err = runtime.BindQueryParameter("form", true, false, "slug", ctx.QueryParams(), &params.Slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "verify_jwt" -------------

	err = runtime.BindQueryParameter("form", true, false, "verify_jwt", ctx.QueryParams(), &params.VerifyJwt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter verify_jwt: %s", err))
	}

	// ------------- Optional query parameter "import_map" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_map", ctx.QueryParams(), &params.ImportMap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter import_map: %s", err))
	}

	// ------------- Optional query parameter "entrypoint_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "entrypoint_path", ctx.QueryParams(), &params.EntrypointPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entrypoint_path: %s", err))
	}

	// ------------- Optional query parameter "import_map_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_map_path", ctx.QueryParams(), &params.ImportMapPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter import_map_path: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateFunction(ctx, ref, params)
	return err
}

// DeleteFunction converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteFunction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Path parameter "function_slug" -------------
	var functionSlug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "function_slug", runtime.ParamLocationPath, ctx.Param("function_slug"), &functionSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter function_slug: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteFunction(ctx, ref, functionSlug)
	return err
}

// GetFunction converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Path parameter "function_slug" -------------
	var functionSlug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "function_slug", runtime.ParamLocationPath, ctx.Param("function_slug"), &functionSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter function_slug: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFunction(ctx, ref, functionSlug)
	return err
}

// UpdateFunction converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateFunction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Path parameter "function_slug" -------------
	var functionSlug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "function_slug", runtime.ParamLocationPath, ctx.Param("function_slug"), &functionSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter function_slug: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params UpdateFunctionParams
	// ------------- Optional query parameter "slug" -------------

	err = runtime.BindQueryParameter("form", true, false, "slug", ctx.QueryParams(), &params.Slug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter slug: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "verify_jwt" -------------

	err = runtime.BindQueryParameter("form", true, false, "verify_jwt", ctx.QueryParams(), &params.VerifyJwt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter verify_jwt: %s", err))
	}

	// ------------- Optional query parameter "import_map" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_map", ctx.QueryParams(), &params.ImportMap)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter import_map: %s", err))
	}

	// ------------- Optional query parameter "entrypoint_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "entrypoint_path", ctx.QueryParams(), &params.EntrypointPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter entrypoint_path: %s", err))
	}

	// ------------- Optional query parameter "import_map_path" -------------

	err = runtime.BindQueryParameter("form", true, false, "import_map_path", ctx.QueryParams(), &params.ImportMapPath)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter import_map_path: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateFunction(ctx, ref, functionSlug, params)
	return err
}

// GetFunctionBody converts echo context to params.
func (w *ServerInterfaceWrapper) GetFunctionBody(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	// ------------- Path parameter "function_slug" -------------
	var functionSlug string

	err = runtime.BindStyledParameterWithLocation("simple", false, "function_slug", runtime.ParamLocationPath, ctx.Param("function_slug"), &functionSlug)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter function_slug: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetFunctionBody(ctx, ref, functionSlug)
	return err
}

// CheckServiceHealth converts echo context to params.
func (w *ServerInterfaceWrapper) CheckServiceHealth(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CheckServiceHealthParams
	// ------------- Optional query parameter "timeout_ms" -------------

	err = runtime.BindQueryParameter("form", true, false, "timeout_ms", ctx.QueryParams(), &params.TimeoutMs)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter timeout_ms: %s", err))
	}

	// ------------- Required query parameter "services" -------------

	err = runtime.BindQueryParameter("form", true, true, "services", ctx.QueryParams(), &params.Services)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter services: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CheckServiceHealth(ctx, ref, params)
	return err
}

// RemoveNetworkBan converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveNetworkBan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveNetworkBan(ctx, ref)
	return err
}

// GetNetworkBans converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkBans(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNetworkBans(ctx, ref)
	return err
}

// GetNetworkRestrictions converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkRestrictions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetNetworkRestrictions(ctx, ref)
	return err
}

// ApplyNetworkRestrictions converts echo context to params.
func (w *ServerInterfaceWrapper) ApplyNetworkRestrictions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ApplyNetworkRestrictions(ctx, ref)
	return err
}

// GetPgsodiumConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetPgsodiumConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPgsodiumConfig(ctx, ref)
	return err
}

// UpdatePgsodiumConfig converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePgsodiumConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePgsodiumConfig(ctx, ref)
	return err
}

// GetPostgRESTConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetPostgRESTConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPostgRESTConfig(ctx, ref)
	return err
}

// UpdatePostgRESTConfig converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePostgRESTConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePostgRESTConfig(ctx, ref)
	return err
}

// GetReadOnlyModeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetReadOnlyModeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetReadOnlyModeStatus(ctx, ref)
	return err
}

// TemporarilyDisableReadonlyMode converts echo context to params.
func (w *ServerInterfaceWrapper) TemporarilyDisableReadonlyMode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TemporarilyDisableReadonlyMode(ctx, ref)
	return err
}

// DeleteSecrets converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSecrets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteSecrets(ctx, ref)
	return err
}

// GetSecrets converts echo context to params.
func (w *ServerInterfaceWrapper) GetSecrets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSecrets(ctx, ref)
	return err
}

// CreateSecrets converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSecrets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateSecrets(ctx, ref)
	return err
}

// GetSslEnforcementConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetSslEnforcementConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSslEnforcementConfig(ctx, ref)
	return err
}

// UpdateSslEnforcementConfig converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSslEnforcementConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSslEnforcementConfig(ctx, ref)
	return err
}

// GetTypescriptTypes converts echo context to params.
func (w *ServerInterfaceWrapper) GetTypescriptTypes(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTypescriptTypesParams
	// ------------- Optional query parameter "included_schemas" -------------

	err = runtime.BindQueryParameter("form", true, false, "included_schemas", ctx.QueryParams(), &params.IncludedSchemas)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter included_schemas: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTypescriptTypes(ctx, ref, params)
	return err
}

// UpgradeProject converts echo context to params.
func (w *ServerInterfaceWrapper) UpgradeProject(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpgradeProject(ctx, ref)
	return err
}

// UpgradeEligibilityInformation converts echo context to params.
func (w *ServerInterfaceWrapper) UpgradeEligibilityInformation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpgradeEligibilityInformation(ctx, ref)
	return err
}

// GetUpgradeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetUpgradeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetUpgradeStatus(ctx, ref)
	return err
}

// RemoveVanitySubdomainConfig converts echo context to params.
func (w *ServerInterfaceWrapper) RemoveVanitySubdomainConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RemoveVanitySubdomainConfig(ctx, ref)
	return err
}

// GetVanitySubdomainConfig converts echo context to params.
func (w *ServerInterfaceWrapper) GetVanitySubdomainConfig(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetVanitySubdomainConfig(ctx, ref)
	return err
}

// ActivateVanitySubdomainPlease converts echo context to params.
func (w *ServerInterfaceWrapper) ActivateVanitySubdomainPlease(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ActivateVanitySubdomainPlease(ctx, ref)
	return err
}

// CheckVanitySubdomainAvailability converts echo context to params.
func (w *ServerInterfaceWrapper) CheckVanitySubdomainAvailability(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "ref" -------------
	var ref string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ref", runtime.ParamLocationPath, ctx.Param("ref"), &ref)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ref: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CheckVanitySubdomainAvailability(ctx, ref)
	return err
}

// ListSnippets converts echo context to params.
func (w *ServerInterfaceWrapper) ListSnippets(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSnippetsParams
	// ------------- Optional query parameter "project_ref" -------------

	err = runtime.BindQueryParameter("form", true, false, "project_ref", ctx.QueryParams(), &params.ProjectRef)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter project_ref: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListSnippets(ctx, params)
	return err
}

// GetSnippet converts echo context to params.
func (w *ServerInterfaceWrapper) GetSnippet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSnippet(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/v1/branches/:branch_id", wrapper.DeleteBranch)
	router.GET(baseURL+"/v1/branches/:branch_id", wrapper.GetBranchDetails)
	router.PATCH(baseURL+"/v1/branches/:branch_id", wrapper.UpdateBranch)
	router.GET(baseURL+"/v1/oauth/authorize", wrapper.Authorize)
	router.POST(baseURL+"/v1/oauth/token", wrapper.Token)
	router.GET(baseURL+"/v1/organizations", wrapper.GetOrganizations)
	router.POST(baseURL+"/v1/organizations", wrapper.CreateOrganization)
	router.GET(baseURL+"/v1/organizations/:slug/members", wrapper.V1ListOrganizationMembers)
	router.GET(baseURL+"/v1/projects", wrapper.GetProjects)
	router.POST(baseURL+"/v1/projects", wrapper.CreateProject)
	router.DELETE(baseURL+"/v1/projects/:ref", wrapper.DeleteProject)
	router.GET(baseURL+"/v1/projects/:ref/api-keys", wrapper.GetProjectApiKeys)
	router.DELETE(baseURL+"/v1/projects/:ref/branches", wrapper.DisableBranch)
	router.GET(baseURL+"/v1/projects/:ref/branches", wrapper.GetBranches)
	router.POST(baseURL+"/v1/projects/:ref/branches", wrapper.CreateBranch)
	router.GET(baseURL+"/v1/projects/:ref/config/auth", wrapper.GetV1AuthConfig)
	router.PATCH(baseURL+"/v1/projects/:ref/config/auth", wrapper.UpdateV1AuthConfig)
	router.GET(baseURL+"/v1/projects/:ref/config/auth/sso/providers", wrapper.ListAllProviders)
	router.POST(baseURL+"/v1/projects/:ref/config/auth/sso/providers", wrapper.CreateProviderForProject)
	router.DELETE(baseURL+"/v1/projects/:ref/config/auth/sso/providers/:provider_id", wrapper.RemoveProviderById)
	router.GET(baseURL+"/v1/projects/:ref/config/auth/sso/providers/:provider_id", wrapper.GetProviderById)
	router.PUT(baseURL+"/v1/projects/:ref/config/auth/sso/providers/:provider_id", wrapper.UpdateProviderById)
	router.GET(baseURL+"/v1/projects/:ref/config/database/pgbouncer", wrapper.V1GetPgbouncerConfig)
	router.GET(baseURL+"/v1/projects/:ref/config/database/postgres", wrapper.GetConfig)
	router.PUT(baseURL+"/v1/projects/:ref/config/database/postgres", wrapper.UpdateConfig)
	router.DELETE(baseURL+"/v1/projects/:ref/custom-hostname", wrapper.RemoveCustomHostnameConfig)
	router.GET(baseURL+"/v1/projects/:ref/custom-hostname", wrapper.GetCustomHostnameConfig)
	router.POST(baseURL+"/v1/projects/:ref/custom-hostname/activate", wrapper.Activate)
	router.POST(baseURL+"/v1/projects/:ref/custom-hostname/initialize", wrapper.CreateCustomHostnameConfig)
	router.POST(baseURL+"/v1/projects/:ref/custom-hostname/reverify", wrapper.Reverify)
	router.POST(baseURL+"/v1/projects/:ref/database/backups/restore-pitr", wrapper.V1RestorePitr)
	router.POST(baseURL+"/v1/projects/:ref/database/query", wrapper.V1RunQuery)
	router.POST(baseURL+"/v1/projects/:ref/database/webhooks/enable", wrapper.V1EnableDatabaseWebhooks)
	router.GET(baseURL+"/v1/projects/:ref/functions", wrapper.GetFunctions)
	router.POST(baseURL+"/v1/projects/:ref/functions", wrapper.CreateFunction)
	router.DELETE(baseURL+"/v1/projects/:ref/functions/:function_slug", wrapper.DeleteFunction)
	router.GET(baseURL+"/v1/projects/:ref/functions/:function_slug", wrapper.GetFunction)
	router.PATCH(baseURL+"/v1/projects/:ref/functions/:function_slug", wrapper.UpdateFunction)
	router.GET(baseURL+"/v1/projects/:ref/functions/:function_slug/body", wrapper.GetFunctionBody)
	router.GET(baseURL+"/v1/projects/:ref/health", wrapper.CheckServiceHealth)
	router.DELETE(baseURL+"/v1/projects/:ref/network-bans", wrapper.RemoveNetworkBan)
	router.POST(baseURL+"/v1/projects/:ref/network-bans/retrieve", wrapper.GetNetworkBans)
	router.GET(baseURL+"/v1/projects/:ref/network-restrictions", wrapper.GetNetworkRestrictions)
	router.POST(baseURL+"/v1/projects/:ref/network-restrictions/apply", wrapper.ApplyNetworkRestrictions)
	router.GET(baseURL+"/v1/projects/:ref/pgsodium", wrapper.GetPgsodiumConfig)
	router.PUT(baseURL+"/v1/projects/:ref/pgsodium", wrapper.UpdatePgsodiumConfig)
	router.GET(baseURL+"/v1/projects/:ref/postgrest", wrapper.GetPostgRESTConfig)
	router.PATCH(baseURL+"/v1/projects/:ref/postgrest", wrapper.UpdatePostgRESTConfig)
	router.GET(baseURL+"/v1/projects/:ref/readonly", wrapper.GetReadOnlyModeStatus)
	router.POST(baseURL+"/v1/projects/:ref/readonly/temporary-disable", wrapper.TemporarilyDisableReadonlyMode)
	router.DELETE(baseURL+"/v1/projects/:ref/secrets", wrapper.DeleteSecrets)
	router.GET(baseURL+"/v1/projects/:ref/secrets", wrapper.GetSecrets)
	router.POST(baseURL+"/v1/projects/:ref/secrets", wrapper.CreateSecrets)
	router.GET(baseURL+"/v1/projects/:ref/ssl-enforcement", wrapper.GetSslEnforcementConfig)
	router.PUT(baseURL+"/v1/projects/:ref/ssl-enforcement", wrapper.UpdateSslEnforcementConfig)
	router.GET(baseURL+"/v1/projects/:ref/types/typescript", wrapper.GetTypescriptTypes)
	router.POST(baseURL+"/v1/projects/:ref/upgrade", wrapper.UpgradeProject)
	router.GET(baseURL+"/v1/projects/:ref/upgrade/eligibility", wrapper.UpgradeEligibilityInformation)
	router.GET(baseURL+"/v1/projects/:ref/upgrade/status", wrapper.GetUpgradeStatus)
	router.DELETE(baseURL+"/v1/projects/:ref/vanity-subdomain", wrapper.RemoveVanitySubdomainConfig)
	router.GET(baseURL+"/v1/projects/:ref/vanity-subdomain", wrapper.GetVanitySubdomainConfig)
	router.POST(baseURL+"/v1/projects/:ref/vanity-subdomain/activate", wrapper.ActivateVanitySubdomainPlease)
	router.POST(baseURL+"/v1/projects/:ref/vanity-subdomain/check-availability", wrapper.CheckVanitySubdomainAvailability)
	router.GET(baseURL+"/v1/snippets", wrapper.ListSnippets)
	router.GET(baseURL+"/v1/snippets/:id", wrapper.GetSnippet)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xde3PcuJH/Kjxeqja5cDyS/Nis/rmSbdnrxLYUjWTXrUthYUjMDNYkwQVASbMuffcr",
	"vPgE+JiXJUv5IysPgQbQ/UOj0egGvrkBjlOcwIRR9/CbS4MFjIH48yhg6Aow+AkkiC0n2TTEMUDJGaQp",
	"TijkRVKCU0gYgqJCkFGGY18W4z+wZQrdQ5cygpK5e3vruQT+kSECQ/fwS634paeL4+nvMGDurecepehf",
	"cGlvEKTI/wqXhqY8NwEx7O6DKOXlhIydYIygacbgB5CmnEajG1/hUnYnDBFDOAHRaeX7XwicuYfuf48L",
	"Vo8Vn8c59U8gyiBvr9aBWodFW63dlIQanQzhDGQR43/iBJ7M3MMv3xpU8l+SLJ5CUv4l52z+yxTjCILE",
	"vb20s1t+EB1ADMbUWET9AAgBSzHg5uAytniFkxma28FAAIN+hGLEfBgDFPkUJmK4MbhBcRa7hwf7z35+",
	"9o+nL5797LkxSuSPe15jzC6NWeqDMEaJJGXstSi0wJTZv8bgxp9x6cEkKKO01lIKKLUTSTFpaYLCJITE",
	"t7JfFMooJOa5YOT0rxBEbGHndAhpQFDKoT5k6nnuFSTUXMk8LXV5r9KkCf0vCUiCxWvIAIpaOj61Cyyc",
	"2uXAv1WlgBIG51KE4dTGX8/9/Zr5FAYEmttMMWVzAqlvZwzny8wsWQZYJvoLEw7kL+7Rq/N3n479X4+P",
	"3p//+n+up3+4+Fj89Orkw7uPb/2LU9dz357wP1+ffP7oeu67j7K0+PPduf/m6N3749eu554dfzj5pP6a",
	"nJ+cvfv41vXci4//+igrXpy+PTt6LX89PbqY8L8KEVkErDkqh2fgRD4+L5eaXe4tSxKBgMHQB2YBzBHz",
	"p4KE8TMKzT9Tv6RN69qwBf8pIDBhfkow779vk2zX9ywN7YOqMRqFrqenU5musTOVoXll5lUaNQnilSgr",
	"xfESh8umKCSf7ZqqQxYEznupjnIz9o6+yZKAKxNLV9Wv/TUbjTJpGADGIEncQ3f8ny9Ho9/A6M+90S/+",
	"6PLvfxm7nlEjotnS//3aCKXa0EQjuTRFJ+0jPCFzkKA/gX2UAywkezOnEj7mFko6tbJmuK8BA1NAocM/",
	"X2MSmnjzNaU+TMA0gqGkkBIYcAy6h4xk0GuZedXWPoIYOnjmLHFGHIV3z6ELnEWhk2DmBDhhACVOiBk1",
	"9QSXeOmjsNnCJMrmeQvl0iZqaQQSA4lsmv/TEUW8XLHPCFTzl0sC3oA4jThN9XvLXKm2cSZ+5710rkHC",
	"ZHcpJFeQOAw7BFIUQgeVm87oCALKRvtcBdDRNaz9fSCs5xHFGVvkBUE6SjCx/dCown+AWUFb/13+/an8",
	"O4AJIyASxQJQ+acmKf5Bge52hWHl0XQvUBy6+XSrY0DJMWd26xS5QiEk5jkCtN3ux8X+oteOQe9HuA0i",
	"9lCDzGzPjSEDIWDAz4jZws0L3MRRC8U6yj4vAHP4Jz4jUjV45xpFkTOFjlpUShCjII66LQbxtZvJK5sC",
	"Jha2ieG13LYa+GqxGsQwO4hOQBy9VszEZIW13s6giTBD21eCmkYSNRz+0YkzyoSqpAwQ5lwjtnDYAjqT",
	"i9Ojl0eTY99JCZyhmyduebqpfnp8C/YeJnO2cA8Pnr/wKsvkX//3v3Iqf3vyP+ZlUu9py4SePf/5hddz",
	"IyHqm5ijVyI7bvSOwbKCic9e617HUrMwddvHoFrQxdtGcZHOCQjhJN8aVIcCCcGkvGPY9zNZI/RRQhlI",
	"AuhHIOMG1AygSEzTA/8KR1kM/RAyECyCRczNxhnBsaFyXuuprgUYryXqMOxjguYoAZGhxjNfKiNJ00cJ",
	"Ykhq27zI82oRPoEiWC3ywt7blrZ/Nve2ZXz/aOnFpQEOajh2/ZMSzDdAtCoeMd2UGKRgYNjsluC3HDAM",
	"9VDMEhKMlqMsipoEI9hd9LrMeMFmNezmp5/NPTE18A9TT0xd/qXUnG7JxOXGnnjP2/cOLg0uHgbIHDLD",
	"xlsXqevWsvwa1fOWe0/OFieFbS6DKFJuu9Z1yVj99tJzkyyKuDUtzeeGwWOsZxwP5IJ4XHCtC+7r3AG+",
	"AkOGOCI20Fe9ER4oxmIicQt8mWKUMD8FbJgfJU4xYdzuNftRiu920p078t5+s4qr6/zXs5Pz8/fHr41q",
	"xsj3giXtm3qTG9SmdLjir+76c69YoXqGuGm0uPmG9VHkD0LkbyF71NVW/fce0Zw9LYtyPupew9cEjYdb",
	"lU4JaqZ+fYTsGpOvL0GLZp6CJOF2Unr1zAdhyK3HwUdtFdepkV5L784gpywUCj2Df2RQ7pTqTsCjKMLX",
	"MHyFQrJO92qEevfLinlxoNgly5ahSlWIWARjddSo1UuIKJB9dT1X/2VSKzgK/U30o6nhKMNENp+mETI2",
	"X+NveSye5k6rZXtylLHFOf4KLR7mIEJ8J2WZ8+pry/lYgENo/eALnYssJ29zAvgeTjmoNFNAxhaYaC+e",
	"IC9OoAikC5/xgRilRGCICAyYnxFkO6MrkejURaXOeSUm1VnSzvKWsIgggJRaO+O58CZFBFIfJcbFrGs0",
	"niu+NLj7EgICSQ9XXlHbq3a23nalq0Z2lLyyLdo7XCNEpDhBM3XgdE5xiLK4MzoBY2aJVam1l5c0NqfO",
	"Sbuag7MZDBi6gn7A99c+RX+aZxJfpxlMhHOD6xc/hrGl4A3XVAmUuqcaWPHiYP/Z01JQxb5nOCjnFFJA",
	"QBTByK+3C0mV5P7ewTNjlIaN4CaJ+Ckk/hywhVQug+lJMn5KcJCvyXZmGclQSLmt5xOYRiiQ+orgqDLf",
	"pEtFTBpRyPXcCAcgMrtGFoDA0J9ms5lik9FMhtL3hWKIM7NSbkHJbQtiWRdkw6kPbxgBPoWABAu7/R9O",
	"fbkoWnFK8DU1BWvUZlpetEzTM3fksntonxFb/PPzuXSbb32cHaElu2SDPFE9g7OeGrhYaaxbOXPog0kz",
	"y7gFu37Wneu386m66sXJCcKJw+cDZSBOK8cbB3sHT0d7T0cHv5zvvzh8enD4/JffTEcB2rXWuWuqn0Xk",
	"+6Vqt96F9dNsU6v9z8K3f+TdcSDd7M8qR7YCDs1jWrWLVl2o7J1bAKPcoMcRmqMpihBbtsW9EhFKA9K0",
	"NZILCmIRNLsIIsAg7SaSYsYNdRD5UwLBV5TM/WABkjkcePqrOEf9GCSZcMszSK44adlw1VtskKlygetj",
	"ENXnQZtkzuhPaqxdu7+ceZ6R30b+2TvZMf5WNreg5lMhuHqkcpdUrZGAFkeRIWKu3Iilk9It8ej+0Sw5",
	"gyA8SaJl16FMKQ6pOXPxFSQEhdAH0uTOEmaJGc5LttBr7MplSUNlW8uWgUZ8FeuK7VUmPgz9IMooq+yu",
	"i3U7nPp5QTNPFqKdZY8B6pI1qp6hK+aBxfgKlt1lFj/UxtxkPfxjZ1ny7wySpdkt8gf/1A1ZWcxEvjYV",
	"thNTJNxBS5vzxvLzujFFpiW96IiRFx3mtj0YXceUrBlBMoHkCgWdEyuPvWh0pGWqeC5KZrias9Eqx2b0",
	"/q3XXsWiGCpJHWX3mVg6ZRXxp4hNoQwTMIfdrh/FTT1kIz8TlKaQ76mY8qpWGTkDV5ggZrGi5LBa11r6",
	"Rw/k5a00SEoCLT1/j4xucMBA7wVUUfoAGeh2i3PCLd0RRLpyODqtPZsaSCgkLZaDdfbh60SuLT3YcEHl",
	"qqO3B/1qKZOsHKeY+8b/iPof8jU/T5cDO36FqNpElHshskaKUYm9C/93No1Q0D2VhG4s87/Sf1W70na+",
	"FyoLv9IBIZTKQFuAdVqIY53N/iB3q2q61X7RaqOHgLSSufUeJ8TjhOg1IbwcYi34vKCmXZZlXvBhD5gb",
	"eXFj+zQ6TmaYBMKPa7WFifwAw1e9zh6rVGnzyKJGrk/P7Dm94rhykolzoVkWRRbLSHkBNjOCKjHP2Ivu",
	"UVF7NF+PjVBe1NiQTr8+ugIoAl0uKSBLRX3aLcqaGj5fpmpy2FvjlWg3fGUxUyMXYn4VWb7mfdNjhu8m",
	"Mnwlr7eWqWdv8pXI9/8VU8YpWyIG5J0AC1Wo9yUCeYXLns133mLQ0gUvN+YbTTXjMPb9BLNKHHceSizC",
	"toMFiCKYzPN4BhkLL8/2fApZlhbBzyIom8oNJ/UJlEEaGekT3pGHkdUH6Nm3EJJzm06W7Ex6tPSjetZu",
	"0RGbOWdXDVZO280NPp60P560342T9ipmWRtot3DWXhKd+F8721v6/4NmS3aP+DE618AgcW6nD8bNmBia",
	"ylMrb2r30345sOwD5HRaXLtWC5LrEbsdxY02m39dfOtnAmky5Urlps0DPJ1PcZYEkHTG5cj7IPwU46i+",
	"uhVmLponmEBp52Sp0PMxZDb9J5Y4GevIVzojRdFerCJAtSJmBCQUBGqjrlS3W1KoZjvIMP4zKCJkTxGz",
	"qBpuXV1BshQq2tcHyQm66UaYvapRFtX7tcy9uRKFfKpLdcOiUaNH211Y6Lrhy2QAJ5iNMipP9ET1kayu",
	"f5RHl73t10vTDVkUBhnhA+HKSJmlMhg1/+sNJjHXRO4/P59rp76wO2W5nOqCsdS9vS0dvYjbIYSXjSMJ",
	"MRGWMslSmcV7dPrO+evV/t9K+RmH7v6TvSd7wquXwgSkyD10n4qfROrzQnRwfLU/lrsoSMff1J4Lhbdy",
	"znFz35A7LH6nIvWapjAQ+wVHOw4ctSkTzRKhut6Fea2X+mN5bn6ptyBLOe9eC1+aeyj6qx1lh27eTbcs",
	"HOkitRoKt5fioEhgSgz9YG+vOTbOruemD29EVq3DsCPZ0hhvGQFiSFr2Xy550zSLY0CWOSMcYOAYA3Na",
	"dsI4WjTOX6eQgb+5l3zjCw1BYm8gE+X0XkzwnTp4NlBKbyEr32JF75KkSl514RmTZvL4dyrX24Jem4Vg",
	"vKNLzLTBQCCQEQSv1oDCW8jqlZ085aEXGFLApAOk2klp08kpWoHEcESUPTXfDw3CtasXpY0AoeGBuq3q",
	"epGevHUgrglBad2uDsALY/1BGLz1xCKCQcYWY53aIlYNpaiqcDrKSzSwJBAj401yyJTzUvpDxjMT07LU",
	"WR92gtpsUMk5Og8EhTIlxLFl6dhbLuXubGAkNMBpERUwpCI3Ud11eBdLlgwmILKlcj/j+hT8GLIFDl2T",
	"2NIICEcJXYCD5y9cz53w/xjEVV9pnu49NdkEt+U5kyPY4Tsdhy0IzuYLB6u4FD1lxL8t0yTPaUqVX786",
	"R87zNKQ+au9mdH19PZphEo8yEsGEsynsr4dq6XO9tOD+xrSgIZPMqAkrEji+kVGwjmAxH68zw0SI4yfq",
	"yFwuBySho/K4HD1/O2RT2m3TkgKrR4uzjCTUAU6EKOPraaWewxZA3GnmqNO8aOlMYYSTucPwE5O9dVJp",
	"ds0Vp5frxZiv1ozw6b8gXSTwJhVRko6IMBOsQcm8ypr+y9J7zlkQRbX6JQFWfr9UscvNmdS8hdDdjjVh",
	"ue5w17PJKNh1BCmcflySIKnmV/SWpeRMo75dlqbZOP5Go2x+O46FE4xarYtP+xw6TbcZtVgbVftU3Xiw",
	"u41Kr9na6gbsNWsHTTvFYq7YBstMxawMUZ58lutqXG3+dAWdlMArhDMaLfVFfUbFeapb24UU6ilcm2d8",
	"mRMlVuc/dWm50zxgaHsKrnzR6o73Sw0BmNXaJtVpryaH6sFyvltTxLWJNP5G4KzmjDO51QrZt+7PVTFH",
	"XbPc1IDyg10Blm8+lIdr5X/u0o9jyPe0IOKZ3abv766TrpQ5uoLJCgIcgxSN9AMNxoWrUGfyuQn6g4my",
	"l46tvbTR0yJdSb69JacdHq0OcUTBNIJULlzwWnlJuNnE9yVVf1sprrM6kSWRfo62uyH94a5zOcYmnwZM",
	"Ryuv1/Kf54ZJFDnN2g2nqRLiE7v/HD7IGVx3aq6xp+z2s8NVdpRNGn097cYbeOWqTpunOc6M4Lgvasrv",
	"FtxF2GzLnBzqfd+/W953uTlZ3fuem4QrnQSa1yvpuheO+DZj49N+Eef8gKxGwxNOw6yK/spKyeUnqr2U",
	"gtVDjgaphUbTetFfKieCpmO8uy72bR3z1YL6d7x13T7q1DngmpjTp8ZgBeB1aqMxpXisH2Kwb4T4Qn0U",
	"RfltmA9IOZlvAR2KlGd7zwz35Bx9eO8cPNlzaJammDAHUfGQgrrEQW1TUK5xhhlW0myeTE6ctCQ2jRVK",
	"cR/flaj3BpM77MrYoletiDbesSFkebjkjqOuMLsTeF1BXgN4AxXT+Jv+sxkGV0WuvPMjl93yXXjHMOsZ",
	"DzlKw7szQVmWy/w3AsJjxBaQODkWr0E7CD1HuWzyR4NCDFWVG0QHgFQChIO0DFBnunQQo87FhQiTqmvJ",
	"Fu/gI87WxZnpFvJ7DjKxTxiEsDRjtu3BwwLZtjYbw5fzvS314EcBebEx6Y3z1mVfe1XGqc4/aYko4Eqj",
	"mqbygPYk9hSdNX25xQ4zl0Flv1qJkW4pvPKetMCAylVsc5c9OLlbrvjemNA1/XX9YnU6Hb4x+9L38Hxi",
	"hrzyXYd0bBJkDRfYyhDTq81qKLMoHZl0Vr7PoX1fWb0o4j7pn815NVWmlWKlI3noaB5WE1uGB3SUvZzt",
	"pAtx18s1j5WbS8e9FeQGdY3l2pPtn72YBbvycmMh1wMgvdTCWKShAqkVzP7SI13irkNo/15CSAtg00pH",
	"i42rnTpJvm8C5eCADYFJXvETqWysNvf7fdFR2zKFDJdC7dgNv0uMVy2lTSG8aTWtvaj2gzmB8ionO8jP",
	"dIlHnbkNPEnmblxjMgbjlNFSC2wBndcfJ7WMZq4+tw663FswBcHXLKVjIm/uGKWIETvyKjd8PAyN2rzU",
	"pL8qXTVGW7XIF9fTd+dnjhSSWljzGy0L4Ssh9hZ6fle+Vcrqqv2HIeLKwwJbWCjrV6tsdpOQJQ79I3Kk",
	"TPtDrFLN4ADoi6VrOF1g/JWOpdu8DVXHooS+d+qzqng/VrHNCUzyydFscDQfHJzo04VhwQOSrbSb4nAp",
	"z9QllT0y4KLIyUsbEt9AGMrh9w88f5M3/gAjzxtPyK+XPbKKr6EQ/vCw9FlJdhp0xW994s91aZH4DsKQ",
	"OogNwI8kpLl4Rw9/65dZyHzdgmoKGIOElxz/58vR6Dcw+nNv9Is/uvz7X8Zub7L6xfOh91OUbpQ11C5d",
	"LWuuXnqVfpXq9ffwVxhA/d3773CCXoWhMjC8CsGrJHwSwgRHIAmfQPonStckv9ONflNPbVYvqZyEplZa",
	"IS1hVmgDk07qWALH3/Sfvkje73OlXEmNXSO2qCkvTmZQXo0ke3eVWk2IeuhKrxl6UOFoa18GqsJdneVU",
	"xSvzacVYhl+f14FOe6KfWLd7YY0vpX0srkdkDUbWRpXpJMq2n9CzPnQ19vqAt+Niv3XBW71T/xG/g43E",
	"R9vzh7M9De9MbNL2NJLfabzNtm1PdbC0vqJU11Ju2gId61dC+lsGvIbhEodB1oEQ9aOG/X62Z3MJF2Ld",
	"5DouKA5CqXx91Bp0+moBg6+VV13vh09GPSXix9St0S49zNH1LIdlyVVPDrUOIncWrvFcbMNzuBMPpvkJ",
	"3w1foVH4BRQ3HYlDR11sv2pglJlaKShfy842HRL5dvZoChLaHR1ZvLT9QE7cLO+L9zcgNqlNeV8cJTCH",
	"C+zJ0KS4Wu0CJ+Xfuw5bypAZa4Tbz9PeQlYwkD6gWJAybHYWeFkW5MpapUJkPZBwpU9Q43DOBpGzcvGH",
	"E61rGP13wExFVutih1QlWcdQ+fMqWBpzZrfEhhzxz/cEVJtft4x4GrB07d9HZNfiK9dDdTOscgvATtWb",
	"lq3XU1bevXxIqXCVge9QHWqprJu0UKdTCmvRX8r33LWkh995CGwtV6756Ouuc+V2gsJGEt3KGGzqrRqp",
	"J44ogpK58K3ph3CdACROADIK8+saHZgEZJkyGBZnHTgKIXF4eYadKQxwDB2UyKcf0DSCT1pRbtGC+tHS",
	"VjXIC50dT84fbEqwSob+jNjin5/PJzAgkO1SK+purK0W64SM3oqOC/XuARy2nT/Mvn8CMdu1VlwZgwa1",
	"2AuGZo1FIAhxEi3bFNYZBOFJEi0/4BBOtFvuoegsPXg58DUzzOfFTRSO5rwT4xAOdp7qIOACBUZ6hmtg",
	"K+U6cTFmME4xAWQ5Uldvtzw6pYqiaKnu2D5TVD7IF7/uZdB57wvJjYJY6Vpys0j1GWICb5iz/9yJUZIx",
	"uIaMqVh4aa+ouihyVPHCgpIHX1w6tCWmzhJSN1GN/zDLXd8n2De/vm012UVF3VWEXxJ8f3y/zKKvNWqV",
	"hUr+0ut6fd2ZjeQ83GEgbv+8sGp57zzfQUt9eLZDO4LaMx3iLGIojQpQ5/kObAHjwRkPP64m646Dl2OX",
	"hvsqim7DiV6N0PXBABNaSpFpw5hlRaXRCCYzTAL5iH+LUT2h0XFR8sG5AqrD3+HmfzJ575REtIoLoJOa",
	"yhV/UrlSMKoU7OcuvS8g2byDoI6PocEK9wikDd9AB6iGxkBuEq1mtccxQeX/ixF2pq7y9fV8mcKJ+OaI",
	"mg6ecYOOOJL7+j1eaXHSLBU7m9Hv1GjEnedti7/6vQyOkiDKQhj6St6VcLMQzkAWMT57smmEArdHCOQP",
	"pJ8Lhm4L9nOYcCE2gTBEF9tIDHieLUvnBIQtbo0LWeBBvSqgxqzz29e8hGN1kMgLqEpH4VpaA5SgqEDL",
	"afnl+xivIKHV8PDci6I+6Ta7tKAqNoYRmqMpikTPLAag6tVxUfQdV7cxuIO5NDt4g7PJjm1pnZAzNUZJ",
	"A1FOWWyD3bBVcJVIyWVMYXCDIFP+3ZYNhuLpg3PYa51VGf+uNhi5GFcKhuYoigCDlKn6+tnIAlpa/62P",
	"pCuQILYc0Wwa4higpDtk+pOoMdEVHm+UDZgjuejkXNzklbIdtAsINAr2uFT2HgtzM5eMmca/PVuXbRwx",
	"QmMEGSF8g2Yh2gsj/dTDgItla6w9jaC8O+0hXF1XHfr3uB7EIoWdXXe7KXyX77tt0LReeLs2zIMFDL6O",
	"wBVAESiMeMvVt7xsjc9H5ZqPmN8N5o3c39r9OFzqG4e7wJJhzQdVPPXGOU1QmqrTfeszmRNdqJe/TA3Z",
	"l6j8Pu9vqR6/R5StGIMTIcqcjELyE3Um/37v5Iwa+GBluW4emxHh+RyGDkpEC2WPqm6lIaDxN/VKoPWk",
	"SBa0yKiqMO7QS2mq25t6+KXE7sFPm6mj3KBCxCyb2/znep9OyBwk6E95YzBMQnFZBS1Yj0vfqWt3Dhuq",
	"5j7K28vb/w8AAP//n1AOYsnmAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
